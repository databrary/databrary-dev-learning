src/Databrary/Model/Funding.hs:32:14-72: Splicing expression
    selectQuery selectFunder "$WHERE funder.fundref_id = ${fi}"
  ======>
    fmap
      (\ (vid_a6LT4, vname_a6LT5) -> Funder vid_a6LT4 vname_a6LT5)
      ((\ _p_a6LTg
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_a6LTf
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT funder.fundref_id,funder.name FROM funder WHERE funder.fundref_id = $1")
                       []
                       [pgEncodeParameter
                          _tenv_a6LTf (PGTypeProxy :: PGTypeName "bigint") _p_a6LTg]
                       [pgBinaryColumn _tenv_a6LTf (PGTypeProxy :: PGTypeName "bigint"),
                        pgBinaryColumn _tenv_a6LTf (PGTypeProxy :: PGTypeName "text")])
               (\ _tenv_a6LTf [_cfundref_id_a6LTh, _cname_a6LTi]
                  -> (pgDecodeColumnNotNull
                        _tenv_a6LTf
                        (PGTypeProxy :: PGTypeName "bigint")
                        _cfundref_id_a6LTh, 
                      pgDecodeColumnNotNull
                        _tenv_a6LTf (PGTypeProxy :: PGTypeName "text") _cname_a6LTi)))
         fi)
src/Databrary/Model/Funding.hs:36:13-82: Splicing expression
    selectQuery
      selectFunder "$WHERE funder.name ILIKE '%' || ${q} || '%'"
  ======>
    fmap
      (\ (vid_a6LZT, vname_a6LZU) -> Funder vid_a6LZT vname_a6LZU)
      ((\ _p_a6M0k
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_a6M0j
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT funder.fundref_id,funder.name FROM funder WHERE funder.name ILIKE '%' || $1 || '%'")
                       []
                       [pgEncodeParameter
                          _tenv_a6M0j (PGTypeProxy :: PGTypeName "text") _p_a6M0k]
                       [pgBinaryColumn _tenv_a6M0j (PGTypeProxy :: PGTypeName "bigint"),
                        pgBinaryColumn _tenv_a6M0j (PGTypeProxy :: PGTypeName "text")])
               (\ _tenv_a6M0j [_cfundref_id_a6M0l, _cname_a6M0m]
                  -> (pgDecodeColumnNotNull
                        _tenv_a6M0j
                        (PGTypeProxy :: PGTypeName "bigint")
                        _cfundref_id_a6M0l, 
                      pgDecodeColumnNotNull
                        _tenv_a6M0j (PGTypeProxy :: PGTypeName "text") _cname_a6M0m)))
         q)
src/Databrary/Model/Funding.hs:61:13-104: Splicing expression
    selectQuery
      selectVolumeFunding
      "$WHERE volume_funding.volume = ${volumeId $ volumeRow vol}"
  ======>
    fmap
      (\ (vawards_a6M5m, vid_a6M5n, vname_a6M5o)
         -> ($)
              (Databrary.Model.Funding.SQL.makeFunding vawards_a6M5m)
              (Funder vid_a6M5n vname_a6M5o))
      ((\ _p_a6M6c
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_a6M6b
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT volume_funding.awards,funder.fundref_id,funder.name FROM volume_funding JOIN funder ON volume_funding.funder = funder.fundref_id WHERE volume_funding.volume = $1")
                       []
                       [pgEncodeParameter
                          _tenv_a6M6b (PGTypeProxy :: PGTypeName "integer") _p_a6M6c]
                       [pgBinaryColumn _tenv_a6M6b (PGTypeProxy :: PGTypeName "text[]"),
                        pgBinaryColumn _tenv_a6M6b (PGTypeProxy :: PGTypeName "bigint"),
                        pgBinaryColumn _tenv_a6M6b (PGTypeProxy :: PGTypeName "text")])
               (\ _tenv_a6M6b [_cawards_a6M6d, _cfundref_id_a6M6e, _cname_a6M6f]
                  -> (pgDecodeColumnNotNull
                        _tenv_a6M6b (PGTypeProxy :: PGTypeName "text[]") _cawards_a6M6d, 
                      pgDecodeColumnNotNull
                        _tenv_a6M6b
                        (PGTypeProxy :: PGTypeName "bigint")
                        _cfundref_id_a6M6e, 
                      pgDecodeColumnNotNull
                        _tenv_a6M6b (PGTypeProxy :: PGTypeName "text") _cname_a6M6f)))
         (volumeId $ volumeRow vol))
