src/Databrary/Model/Excerpt.hs:31:25-119: Splicing expression
    selectQuery
      selectAssetSlotExcerpt
      "$WHERE excerpt.asset = ${assetId $ assetRow $ slotAsset a}"
  ======>
    fmap
      (\ (vsegment_aeuuP, vrelease_aeuuQ)
         -> Databrary.Model.Excerpt.SQL.makeExcerpt
              vsegment_aeuuP vrelease_aeuuQ)
      ((\ _p_aeuuX
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_aeuuW
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT excerpt.segment,excerpt.release FROM excerpt WHERE excerpt.asset = $1")
                       []
                       [Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_aeuuW
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_aeuuX]
                       [Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuuW
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "segment"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuuW
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release")])
               (\ _tenv_aeuuW [_csegment_aeuuY, _crelease_aeuuZ]
                  -> (Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuuW
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "segment")
                        _csegment_aeuuY, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuuW
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "release")
                        _crelease_aeuuZ)))
         (assetId $ assetRow $ slotAsset a))
src/Databrary/Model/Excerpt.hs:35:25-150: Splicing expression
    selectQuery
      selectContainerExcerpt
      "$WHERE slot_asset.container = ${containerId $ containerRow c} AND excerpt.segment && ${s}"
  ======>
    fmap
      (\ (vsegment_aeuvn, vsegment_aeuvo, vrelease_aeuvp, vid_aeuvq,
          vformat_aeuvr, vrelease_aeuvs, vduration_aeuvt, vname_aeuvw,
          vc_aeuvx, vsize_aeuvy)
         -> Databrary.Model.Excerpt.SQL.makeContainerExcerpt
              (Databrary.Model.Excerpt.SQL.makeAssetContainerExcerpt
                 vsegment_aeuvn
                 (Databrary.Model.Excerpt.SQL.makeExcerpt
                    vsegment_aeuvo vrelease_aeuvp))
              (Databrary.Model.Asset.SQL.makeAssetRow
                 vid_aeuvq
                 vformat_aeuvr
                 vrelease_aeuvs
                 vduration_aeuvt
                 vname_aeuvw
                 vc_aeuvx
                 vsize_aeuvy))
      ((\ _p_aeuyn _p_aeuyo
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_aeuym
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT slot_asset.segment,excerpt.segment,excerpt.release,asset.id,asset.format,asset.release,asset.duration,asset.name,asset.sha1,asset.size FROM slot_asset JOIN excerpt ON slot_asset.asset = excerpt.asset JOIN asset ON slot_asset.asset = asset.id WHERE slot_asset.container = $1 AND excerpt.segment && $2")
                       []
                       [Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_aeuym
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_aeuyn,
                        Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_aeuym
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "segment")
                          _p_aeuyo]
                       [Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuym
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "segment"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuym
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "segment"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuym
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuym
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuym
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "smallint"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuym
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuym
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "interval"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuym
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "text"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuym
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "bytea"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuym
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "bigint")])
               (\ _tenv_aeuym
                  [_csegment_aeuyp,
                   _csegment_aeuyq,
                   _crelease_aeuyr,
                   _cid_aeuys,
                   _cformat_aeuyt,
                   _crelease_aeuyu,
                   _cduration_aeuyv,
                   _cname_aeuyw,
                   _csha1_aeuyx,
                   _csize_aeuyy]
                  -> (Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuym
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "segment")
                        _csegment_aeuyp, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuym
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "segment")
                        _csegment_aeuyq, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuym
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "release")
                        _crelease_aeuyr, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuym
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                        _cid_aeuys, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuym
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "smallint")
                        _cformat_aeuyt, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuym
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "release")
                        _crelease_aeuyu, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuym
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "interval")
                        _cduration_aeuyv, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuym
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "text")
                        _cname_aeuyw, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuym
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "bytea")
                        _csha1_aeuyx, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuym
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "bigint")
                        _csize_aeuyy)))
         (containerId $ containerRow c) s)
src/Databrary/Model/Excerpt.hs:39:25-105: Splicing expression
    selectQuery
      selectVolumeExcerpt
      "$WHERE asset.volume = ${volumeId $ volumeRow v}"
  ======>
    fmap
      (\ (vsegment_aeuBL, vsegment_aeuBM, vrelease_aeuBN, vid_aeuBO,
          vformat_aeuBP, vrelease_aeuBQ, vduration_aeuBR, vname_aeuBS,
          vc_aeuBT, vsize_aeuBU, vid_aeuBV, vtop_aeuBW, vname_aeuBX,
          vdate_aeuBY, vrelease_aeuBZ)
         -> Databrary.Model.Excerpt.SQL.makeVolumeExcerpt
              (Databrary.Model.Excerpt.SQL.makeAssetContainerExcerpt
                 vsegment_aeuBL
                 (Databrary.Model.Excerpt.SQL.makeExcerpt
                    vsegment_aeuBM vrelease_aeuBN))
              (Databrary.Model.Asset.SQL.makeAssetRow
                 vid_aeuBO
                 vformat_aeuBP
                 vrelease_aeuBQ
                 vduration_aeuBR
                 vname_aeuBS
                 vc_aeuBT
                 vsize_aeuBU)
              (Container
                 (ContainerRow vid_aeuBV vtop_aeuBW vname_aeuBX vdate_aeuBY)
                 vrelease_aeuBZ))
      ((\ _p_aeuCu
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_aeuCt
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT slot_asset.segment,excerpt.segment,excerpt.release,asset.id,asset.format,asset.release,asset.duration,asset.name,asset.sha1,asset.size,container.id,container.top,container.name,container.date,slot_release.release FROM slot_asset JOIN excerpt ON slot_asset.asset = excerpt.asset JOIN asset ON slot_asset.asset = asset.id JOIN container LEFT JOIN slot_release ON container.id = slot_release.container AND slot_release.segment = '(,)' ON slot_asset.container = container.id AND asset.volume = container.volume WHERE asset.volume = $1")
                       []
                       [Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_aeuCt
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_aeuCu]
                       [Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuCt
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "segment"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuCt
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "segment"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuCt
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuCt
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuCt
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "smallint"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuCt
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuCt
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "interval"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuCt
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "text"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuCt
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "bytea"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuCt
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "bigint"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuCt
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuCt
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "boolean"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuCt
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "text"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuCt
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "date"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuCt
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release")])
               (\ _tenv_aeuCt
                  [_csegment_aeuCw,
                   _csegment_aeuCx,
                   _crelease_aeuCy,
                   _cid_aeuCz,
                   _cformat_aeuCA,
                   _crelease_aeuCB,
                   _cduration_aeuCC,
                   _cname_aeuCD,
                   _csha1_aeuCE,
                   _csize_aeuCF,
                   _cid_aeuCG,
                   _ctop_aeuCH,
                   _cname_aeuCI,
                   _cdate_aeuCJ,
                   _crelease_aeuCK]
                  -> (Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuCt
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "segment")
                        _csegment_aeuCw, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuCt
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "segment")
                        _csegment_aeuCx, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuCt
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "release")
                        _crelease_aeuCy, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuCt
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                        _cid_aeuCz, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuCt
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "smallint")
                        _cformat_aeuCA, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuCt
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "release")
                        _crelease_aeuCB, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuCt
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "interval")
                        _cduration_aeuCC, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuCt
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "text")
                        _cname_aeuCD, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuCt
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "bytea")
                        _csha1_aeuCE, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuCt
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "bigint")
                        _csize_aeuCF, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuCt
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                        _cid_aeuCG, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuCt
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "boolean")
                        _ctop_aeuCH, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuCt
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "text")
                        _cname_aeuCI, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuCt
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "date")
                        _cdate_aeuCJ, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuCt
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "release")
                        _crelease_aeuCK)))
         (volumeId $ volumeRow v))
src/Databrary/Model/Excerpt.hs:(43,64)-(49,13): Splicing expression
    selectQuery
      selectContainerExcerpt
      "$JOIN format ON asset.format = format.id WHERE slot_asset.container = ${containerId $ containerRow c} AND excerpt.segment && ${s} AND COALESCE(GREATEST(excerpt.release, asset.release), ${containerRelease c}) >= ${readRelease (view c)}::release AND (asset.duration IS NOT NULL AND format.mimetype LIKE 'video/%' OR format.mimetype LIKE 'image/%') AND asset.sha1 IS NOT NULL LIMIT 1"
  ======>
    fmap
      (\ (vsegment_aeuJh, vsegment_aeuJi, vrelease_aeuJj, vid_aeuJk,
          vformat_aeuJl, vrelease_aeuJm, vduration_aeuJn, vname_aeuJo,
          vc_aeuJp, vsize_aeuJq)
         -> Databrary.Model.Excerpt.SQL.makeContainerExcerpt
              (Databrary.Model.Excerpt.SQL.makeAssetContainerExcerpt
                 vsegment_aeuJh
                 (Databrary.Model.Excerpt.SQL.makeExcerpt
                    vsegment_aeuJi vrelease_aeuJj))
              (Databrary.Model.Asset.SQL.makeAssetRow
                 vid_aeuJk
                 vformat_aeuJl
                 vrelease_aeuJm
                 vduration_aeuJn
                 vname_aeuJo
                 vc_aeuJp
                 vsize_aeuJq))
      ((\ _p_aeuMD _p_aeuME _p_aeuMF _p_aeuMG
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_aeuMC
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT slot_asset.segment,excerpt.segment,excerpt.release,asset.id,asset.format,asset.release,asset.duration,asset.name,asset.sha1,asset.size FROM slot_asset JOIN excerpt ON slot_asset.asset = excerpt.asset JOIN asset ON slot_asset.asset = asset.id JOIN format ON asset.format = format.id WHERE slot_asset.container = $1 AND excerpt.segment && $2 AND COALESCE(GREATEST(excerpt.release, asset.release), $3) >= $4::release AND (asset.duration IS NOT NULL AND format.mimetype LIKE 'video/%' OR format.mimetype LIKE 'image/%') AND asset.sha1 IS NOT NULL LIMIT 1")
                       []
                       [Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_aeuMC
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_aeuMD,
                        Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_aeuMC
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "segment")
                          _p_aeuME,
                        Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_aeuMC
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release")
                          _p_aeuMF,
                        Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_aeuMC
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release")
                          _p_aeuMG]
                       [Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuMC
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "segment"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuMC
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "segment"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuMC
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuMC
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuMC
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "smallint"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuMC
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuMC
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "interval"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuMC
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "text"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuMC
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "bytea"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuMC
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "bigint")])
               (\ _tenv_aeuMC
                  [_csegment_aeuMH,
                   _csegment_aeuMI,
                   _crelease_aeuMJ,
                   _cid_aeuMK,
                   _cformat_aeuML,
                   _crelease_aeuMM,
                   _cduration_aeuMN,
                   _cname_aeuMO,
                   _csha1_aeuMP,
                   _csize_aeuMQ]
                  -> (Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuMC
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "segment")
                        _csegment_aeuMH, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuMC
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "segment")
                        _csegment_aeuMI, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuMC
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "release")
                        _crelease_aeuMJ, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuMC
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                        _cid_aeuMK, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuMC
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "smallint")
                        _cformat_aeuML, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuMC
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "release")
                        _crelease_aeuMM, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuMC
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "interval")
                        _cduration_aeuMN, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuMC
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "text")
                        _cname_aeuMO, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuMC
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "bytea")
                        _csha1_aeuMP, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuMC
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "bigint")
                        _csize_aeuMQ)))
         (containerId $ containerRow c)
         s
         (containerRelease c)
         (readRelease (view c)))
src/Databrary/Model/Excerpt.hs:(53,64)-(59,41): Splicing expression
    selectQuery
      selectVolumeExcerpt
      "$JOIN format ON asset.format = format.id WHERE asset.volume = ${volumeId $ volumeRow v} AND COALESCE(GREATEST(excerpt.release, asset.release), slot_release.release) >= ${readRelease (view v)}::release AND (asset.duration IS NOT NULL AND format.mimetype LIKE 'video/%' OR format.mimetype LIKE 'image/%') AND asset.sha1 IS NOT NULL ORDER BY container.top DESC LIMIT 1"
  ======>
    fmap
      (\ (vsegment_aeuUI, vsegment_aeuUJ, vrelease_aeuUK, vid_aeuUL,
          vformat_aeuUM, vrelease_aeuUN, vduration_aeuUO, vname_aeuUP,
          vc_aeuUQ, vsize_aeuUR, vid_aeuUS, vtop_aeuUT, vname_aeuUU,
          vdate_aeuUV, vrelease_aeuUW)
         -> Databrary.Model.Excerpt.SQL.makeVolumeExcerpt
              (Databrary.Model.Excerpt.SQL.makeAssetContainerExcerpt
                 vsegment_aeuUI
                 (Databrary.Model.Excerpt.SQL.makeExcerpt
                    vsegment_aeuUJ vrelease_aeuUK))
              (Databrary.Model.Asset.SQL.makeAssetRow
                 vid_aeuUL
                 vformat_aeuUM
                 vrelease_aeuUN
                 vduration_aeuUO
                 vname_aeuUP
                 vc_aeuUQ
                 vsize_aeuUR)
              (Container
                 (ContainerRow vid_aeuUS vtop_aeuUT vname_aeuUU vdate_aeuUV)
                 vrelease_aeuUW))
      ((\ _p_aeuV2 _p_aeuV3
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_aeuV1
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT slot_asset.segment,excerpt.segment,excerpt.release,asset.id,asset.format,asset.release,asset.duration,asset.name,asset.sha1,asset.size,container.id,container.top,container.name,container.date,slot_release.release FROM slot_asset JOIN excerpt ON slot_asset.asset = excerpt.asset JOIN asset ON slot_asset.asset = asset.id JOIN container LEFT JOIN slot_release ON container.id = slot_release.container AND slot_release.segment = '(,)' ON slot_asset.container = container.id AND asset.volume = container.volume JOIN format ON asset.format = format.id WHERE asset.volume = $1 AND COALESCE(GREATEST(excerpt.release, asset.release), slot_release.release) >= $2::release AND (asset.duration IS NOT NULL AND format.mimetype LIKE 'video/%' OR format.mimetype LIKE 'image/%') AND asset.sha1 IS NOT NULL ORDER BY container.top DESC LIMIT 1")
                       []
                       [Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_aeuV1
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_aeuV2,
                        Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_aeuV1
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release")
                          _p_aeuV3]
                       [Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuV1
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "segment"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuV1
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "segment"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuV1
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuV1
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuV1
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "smallint"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuV1
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuV1
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "interval"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuV1
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "text"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuV1
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "bytea"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuV1
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "bigint"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuV1
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuV1
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "boolean"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuV1
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "text"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuV1
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "date"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_aeuV1
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release")])
               (\ _tenv_aeuV1
                  [_csegment_aeuV4,
                   _csegment_aeuV5,
                   _crelease_aeuV6,
                   _cid_aeuV7,
                   _cformat_aeuV8,
                   _crelease_aeuV9,
                   _cduration_aeuVa,
                   _cname_aeuVb,
                   _csha1_aeuVc,
                   _csize_aeuVd,
                   _cid_aeuVe,
                   _ctop_aeuVf,
                   _cname_aeuVg,
                   _cdate_aeuVh,
                   _crelease_aeuVi]
                  -> (Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuV1
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "segment")
                        _csegment_aeuV4, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuV1
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "segment")
                        _csegment_aeuV5, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuV1
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "release")
                        _crelease_aeuV6, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuV1
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                        _cid_aeuV7, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuV1
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "smallint")
                        _cformat_aeuV8, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuV1
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "release")
                        _crelease_aeuV9, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuV1
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "interval")
                        _cduration_aeuVa, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuV1
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "text")
                        _cname_aeuVb, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuV1
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "bytea")
                        _csha1_aeuVc, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuV1
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "bigint")
                        _csize_aeuVd, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuV1
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                        _cid_aeuVe, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuV1
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "boolean")
                        _ctop_aeuVf, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuV1
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "text")
                        _cname_aeuVg, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_aeuV1
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "date")
                        _cdate_aeuVh, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_aeuV1
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "release")
                        _crelease_aeuVi)))
         (volumeId $ volumeRow v) (readRelease (view v)))
src/Databrary/Model/Excerpt.hs:65:7-29: Splicing expression
    updateExcerpt 'ident_aeuWF 'e_aeuWD
  ======>
    (\ _p_aeuXq _p_aeuXr _p_aeuXs _p_aeuXt _p_aeuXu
       -> Database.PostgreSQL.Typed.Query.QueryParser
            (\ _tenv_aeuXp
               -> Database.PostgreSQL.Typed.Query.SimpleQuery
                    (Data.ByteString.concat
                       [Data.String.fromString
                          "WITH audit_row AS (UPDATE excerpt SET release=",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_aeuXp
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release")
                          _p_aeuXq,
                        Data.String.fromString " WHERE asset=",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_aeuXp
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_aeuXr,
                        Data.String.fromString " AND segment=",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_aeuXp
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "segment")
                          _p_aeuXs,
                        Data.String.fromString
                          " RETURNING *) INSERT INTO audit.excerpt SELECT CURRENT_TIMESTAMP, ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_aeuXp
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_aeuXt,
                        Data.String.fromString ", ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_aeuXp
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "inet")
                          _p_aeuXu,
                        Data.String.fromString
                          ", 'change'::audit.action, * FROM audit_row"]))
            (\ _tenv_aeuXp [] -> ()))
      (excerptRelease e)
      (assetId $ assetRow $ slotAsset $ segmentAsset $ excerptAsset e)
      (assetSegment $ excerptAsset e)
      (auditWho ident)
      (auditIp ident)
src/Databrary/Model/Excerpt.hs:66:7-29: Splicing expression
    insertExcerpt 'ident_aeuWF 'e_aeuWD
  ======>
    (\ _p_aeuZ0 _p_aeuZ1 _p_aeuZ2 _p_aeuZ3 _p_aeuZ4
       -> Database.PostgreSQL.Typed.Query.QueryParser
            (\ _tenv_aeuYZ
               -> Database.PostgreSQL.Typed.Query.SimpleQuery
                    (Data.ByteString.concat
                       [Data.String.fromString
                          "WITH audit_row AS (INSERT INTO excerpt (asset,segment,release) VALUES (",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_aeuYZ
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_aeuZ0,
                        Data.String.fromString ",",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_aeuYZ
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "segment")
                          _p_aeuZ1,
                        Data.String.fromString ",",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_aeuYZ
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release")
                          _p_aeuZ2,
                        Data.String.fromString
                          ") RETURNING *) INSERT INTO audit.excerpt SELECT CURRENT_TIMESTAMP, ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_aeuYZ
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_aeuZ3,
                        Data.String.fromString ", ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_aeuYZ
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "inet")
                          _p_aeuZ4,
                        Data.String.fromString ", 'add'::audit.action, * FROM audit_row"]))
            (\ _tenv_aeuYZ [] -> ()))
      (assetId $ assetRow $ slotAsset $ segmentAsset $ excerptAsset e)
      (assetSegment $ excerptAsset e)
      (excerptRelease e)
      (auditWho ident)
      (auditIp ident)
src/Databrary/Model/Excerpt.hs:71:16-38: Splicing expression
    deleteExcerpt 'ident_aeuZV 'e_aeuZT
  ======>
    (\ _p_aev0R _p_aev0T _p_aev0U _p_aev0V
       -> Database.PostgreSQL.Typed.Query.QueryParser
            (\ _tenv_aev0Q
               -> Database.PostgreSQL.Typed.Query.SimpleQuery
                    (Data.ByteString.concat
                       [Data.String.fromString
                          "WITH audit_row AS (DELETE FROM excerpt WHERE asset = ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_aev0Q
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_aev0R,
                        Data.String.fromString " AND segment <@ ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_aev0Q
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "segment")
                          _p_aev0T,
                        Data.String.fromString
                          " RETURNING *) INSERT INTO audit.excerpt SELECT CURRENT_TIMESTAMP, ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_aev0Q
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_aev0U,
                        Data.String.fromString ", ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_aev0Q
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "inet")
                          _p_aev0V,
                        Data.String.fromString
                          ", 'remove'::audit.action, * FROM audit_row"]))
            (\ _tenv_aev0Q [] -> ()))
      (assetId $ assetRow $ slotAsset $ segmentAsset e)
      (assetSegment e)
      (auditWho ident)
      (auditIp ident)
