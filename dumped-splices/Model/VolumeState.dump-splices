src/Databrary/Model/VolumeState.hs:25:25-153: Splicing expression
    selectQuery
      selectVolumeState
      "$WHERE volume = ${volumeId $ volumeRow v} AND (public OR ${volumePermission v >= PermissionEDIT})"
  ======>
    fmap
      (\ (vkey_a7xhf, vvalue_a7xhg, vpublic_a7xhh)
         -> VolumeState vkey_a7xhf vvalue_a7xhg vpublic_a7xhh)
      ((\ _p_a7xjm _p_a7xjn
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_a7xjl
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT volume_state.key,volume_state.value,volume_state.public FROM volume_state WHERE volume = $1 AND (public OR $2)")
                       []
                       [pgEncodeParameter
                          _tenv_a7xjl (PGTypeProxy :: PGTypeName "integer") _p_a7xjm,
                        pgEncodeParameter
                          _tenv_a7xjl (PGTypeProxy :: PGTypeName "boolean") _p_a7xjn]
                       [pgBinaryColumn
                          _tenv_a7xjl (PGTypeProxy :: PGTypeName "character varying"),
                        pgBinaryColumn _tenv_a7xjl (PGTypeProxy :: PGTypeName "jsonb"),
                        pgBinaryColumn _tenv_a7xjl (PGTypeProxy :: PGTypeName "boolean")])
               (\ _tenv_a7xjl [_ckey_a7xjo, _cvalue_a7xjp, _cpublic_a7xjq]
                  -> (pgDecodeColumnNotNull
                        _tenv_a7xjl
                        (PGTypeProxy :: PGTypeName "character varying")
                        _ckey_a7xjo, 
                      pgDecodeColumnNotNull
                        _tenv_a7xjl (PGTypeProxy :: PGTypeName "jsonb") _cvalue_a7xjp, 
                      pgDecodeColumnNotNull
                        _tenv_a7xjl (PGTypeProxy :: PGTypeName "boolean") _cpublic_a7xjq)))
         (volumeId $ volumeRow v) ((volumePermission v) >= PermissionEDIT))
