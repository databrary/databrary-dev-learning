Databrary/Model/Category/Types.hs:35:1-35: Splicing declarations
    makeHasRec ''Category ['categoryId]
  ======>
    instance Databrary.Has.Has (Id Category) Category where
      Databrary.Has.view = categoryId
Databrary/Model/Category/Types.hs:36:1-21: Splicing declarations
    deriveLift ''Category
  ======>
    instance Language.Haskell.TH.Syntax.Lift Category where
      Language.Haskell.TH.Syntax.lift
        = \ e_a40wV
            -> case e_a40wV of {
                 Category x0_a40wX x1_a40wY x2_a40x0
                   -> Language.Haskell.TH.Lib.appE
                        (Language.Haskell.TH.Lib.appE
                           (Language.Haskell.TH.Lib.appE
                              (Language.Haskell.TH.Lib.conE
                                 (Language.Haskell.TH.Syntax.Name
                                    (Language.Haskell.TH.Syntax.mkOccName "Category")
                                    (Language.Haskell.TH.Syntax.NameG
                                       Language.Haskell.TH.Syntax.DataName
                                       (Language.Haskell.TH.Syntax.mkPkgName "main")
                                       (Language.Haskell.TH.Syntax.mkModName
                                          "Databrary.Model.Category.Types"))))
                              (Language.Haskell.TH.Syntax.lift x0_a40wX))
                           (Language.Haskell.TH.Syntax.lift x1_a40wY))
                        (Language.Haskell.TH.Syntax.lift x2_a40x0) }
