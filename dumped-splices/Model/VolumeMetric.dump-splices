Databrary/Model/VolumeMetric.hs:24:13-102: Splicing expression
    selectQuery
      selectVolumeMetric
      "$WHERE volume = ${volumeId $ volumeRow v} ORDER BY metric"
  ======>
    fmap
      (\ (vmetric_a6DoH) -> id vmetric_a6DoH)
      ((\ _p_a6DoJ
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_a6DoI
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT volume_metric.metric FROM volume_metric WHERE volume = $1 ORDER BY metric")
                       []
                       [Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_a6DoI
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_a6DoJ]
                       [Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6DoI
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")])
               (\ _tenv_a6DoI [_cmetric_a6DoK]
                  -> (Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_a6DoI
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                        _cmetric_a6DoK)))
         (volumeId $ volumeRow v))
Databrary/Model/VolumeMetric.hs:28:18-157: Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      pgSQL
      "INSERT INTO volume_metric SELECT ${volumeId $ volumeRow v}, id FROM metric WHERE category = ${c} AND required IS NOT NULL RETURNING metric"
  ======>
    (\ _p_a6Dpy _p_a6Dpz
       -> Database.PostgreSQL.Typed.Query.QueryParser
            (\ _tenv_a6Dpx
               -> Database.PostgreSQL.Typed.Query.SimpleQuery
                    (Data.ByteString.concat
                       [Data.String.fromString "INSERT INTO volume_metric SELECT ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_a6Dpx
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_a6Dpy,
                        Data.String.fromString ", id FROM metric WHERE category = ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_a6Dpx
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "smallint")
                          _p_a6Dpz,
                        Data.String.fromString
                          " AND required IS NOT NULL RETURNING metric"]))
            (\ _tenv_a6Dpx [_cmetric_a6DpA]
               -> (Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                     _tenv_a6Dpx
                     (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                        Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                     _cmetric_a6DpA)))
      (volumeId $ volumeRow v) c
Databrary/Model/VolumeMetric.hs:33:23-90: Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      pgSQL
      "INSERT INTO volume_metric VALUES (${volumeId $ volumeRow v}, ${m})"
  ======>
    (\ _p_a6Dqk _p_a6Dql
       -> Database.PostgreSQL.Typed.Query.QueryParser
            (\ _tenv_a6Dqi
               -> Database.PostgreSQL.Typed.Query.SimpleQuery
                    (Data.ByteString.concat
                       [Data.String.fromString "INSERT INTO volume_metric VALUES (",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_a6Dqi
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_a6Dqk,
                        Data.String.fromString ", ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_a6Dqi
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_a6Dql,
                        Data.String.fromString ")"]))
            (\ _tenv_a6Dqi [] -> ()))
      (volumeId $ volumeRow v) m
Databrary/Model/VolumeMetric.hs:37:21-106: Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      pgSQL
      "DELETE FROM volume_metric WHERE volume = ${volumeId $ volumeRow v} AND metric = ${m}"
  ======>
    (\ _p_a6DCo _p_a6DCp
       -> Database.PostgreSQL.Typed.Query.QueryParser
            (\ _tenv_a6DCn
               -> Database.PostgreSQL.Typed.Query.SimpleQuery
                    (Data.ByteString.concat
                       [Data.String.fromString
                          "DELETE FROM volume_metric WHERE volume = ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_a6DCn
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_a6DCo,
                        Data.String.fromString " AND metric = ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_a6DCn
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_a6DCp]))
            (\ _tenv_a6DCn [] -> ()))
      (volumeId $ volumeRow v) m
Databrary/Model/VolumeMetric.hs:41:20-136: Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      pgSQL
      "DELETE FROM volume_metric USING metric WHERE volume = ${volumeId $ volumeRow v} AND metric = id AND category = ${c}"
  ======>
    (\ _p_a6Gu1 _p_a6Gu2
       -> Database.PostgreSQL.Typed.Query.QueryParser
            (\ _tenv_a6Gu0
               -> Database.PostgreSQL.Typed.Query.SimpleQuery
                    (Data.ByteString.concat
                       [Data.String.fromString
                          "DELETE FROM volume_metric USING metric WHERE volume = ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_a6Gu0
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_a6Gu1,
                        Data.String.fromString " AND metric = id AND category = ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_a6Gu0
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "smallint")
                          _p_a6Gu2]))
            (\ _tenv_a6Gu0 [] -> ()))
      (volumeId $ volumeRow v) c
