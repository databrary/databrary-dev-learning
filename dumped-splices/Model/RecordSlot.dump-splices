src/Databrary/Model/RecordSlot.hs:46:25-114: Splicing expression
    selectQuery
      selectRecordSlotRecord
      "$WHERE slot_record.record = ${recordId $ recordRow r}"
  ======>
    fmap
      (\ (vsegment_acBtC, vid_acBtD, vtop_acBtE, vname_acBtF,
          vdate_acBtG, vrelease_acBtH)
         -> Databrary.Model.RecordSlot.SQL.makeRecordSlotRecord
              (Databrary.Model.RecordSlot.SQL.makeSlotRecord vsegment_acBtC)
              (Container
                 (ContainerRow vid_acBtD vtop_acBtE vname_acBtF vdate_acBtG)
                 vrelease_acBtH))
      ((\ _p_acBtJ
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_acBtI
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT slot_record.segment,container.id,container.top,container.name,container.date,slot_release.release FROM slot_record JOIN container LEFT JOIN slot_release ON container.id = slot_release.container AND slot_release.segment = '(,)' ON slot_record.container = container.id WHERE slot_record.record = $1")
                       []
                       [Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_acBtI (PGTypeProxy :: PGTypeName "integer") _p_acBtJ]
                       [Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_acBtI (PGTypeProxy :: PGTypeName "segment"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_acBtI (PGTypeProxy :: PGTypeName "integer"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_acBtI (PGTypeProxy :: PGTypeName "boolean"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_acBtI (PGTypeProxy :: PGTypeName "text"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_acBtI (PGTypeProxy :: PGTypeName "date"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_acBtI (PGTypeProxy :: PGTypeName "release")])
               (\ _tenv_acBtI
                  [_csegment_acBtK,
                   _cid_acBtL,
                   _ctop_acBtM,
                   _cname_acBtN,
                   _cdate_acBtO,
                   _crelease_acBtP]
                  -> (Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acBtI (PGTypeProxy :: PGTypeName "segment") _csegment_acBtK, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acBtI (PGTypeProxy :: PGTypeName "integer") _cid_acBtL, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acBtI (PGTypeProxy :: PGTypeName "boolean") _ctop_acBtM, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_acBtI (PGTypeProxy :: PGTypeName "text") _cname_acBtN, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_acBtI (PGTypeProxy :: PGTypeName "date") _cdate_acBtO, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acBtI
                        (PGTypeProxy :: PGTypeName "release")
                        _crelease_acBtP)))
         (recordId $ recordRow r))
src/Databrary/Model/RecordSlot.hs:50:25-158: Splicing expression
    selectQuery
      selectContainerSlotRecord
      "$WHERE slot_record.container = ${containerId $ containerRow c} AND slot_record.segment && ${s}"
  ======>
    fmap
      (\ (vsegment_acO4l, vid_acO4m, vcategory_acO4n, vmeasures_acO4o,
          vc_acO4p)
         -> Databrary.Model.RecordSlot.SQL.makeContainerSlotRecord
              (Databrary.Model.RecordSlot.SQL.makeSlotRecord vsegment_acO4l)
              (($)
                 (Databrary.Model.Record.SQL.makeRecord
                    vid_acO4m vcategory_acO4n vmeasures_acO4o)
                 vc_acO4p))
      ((\ _p_acO6d _p_acO6e
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_acO6c
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT slot_record.segment,record.id,record.category,record.measures,record_release(record.id) FROM slot_record JOIN record_measures AS record ON slot_record.record = record.id WHERE slot_record.container = $1 AND slot_record.segment && $2")
                       []
                       [Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_acO6c (PGTypeProxy :: PGTypeName "integer") _p_acO6d,
                        Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_acO6c (PGTypeProxy :: PGTypeName "segment") _p_acO6e]
                       [Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_acO6c (PGTypeProxy :: PGTypeName "segment"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_acO6c (PGTypeProxy :: PGTypeName "integer"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_acO6c (PGTypeProxy :: PGTypeName "smallint"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_acO6c (PGTypeProxy :: PGTypeName "text[]"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_acO6c (PGTypeProxy :: PGTypeName "release")])
               (\ _tenv_acO6c
                  [_csegment_acO6f,
                   _cid_acO6g,
                   _ccategory_acO6h,
                   _cmeasures_acO6i,
                   _crecord_release_acO6j]
                  -> (Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acO6c (PGTypeProxy :: PGTypeName "segment") _csegment_acO6f, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acO6c (PGTypeProxy :: PGTypeName "integer") _cid_acO6g, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acO6c
                        (PGTypeProxy :: PGTypeName "smallint")
                        _ccategory_acO6h, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acO6c (PGTypeProxy :: PGTypeName "text[]") _cmeasures_acO6i, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_acO6c
                        (PGTypeProxy :: PGTypeName "release")
                        _crecord_release_acO6j)))
         (containerId $ containerRow c) s)
src/Databrary/Model/RecordSlot.hs:57:33-222: Splicing expression
    selectQuery
      selectRecordContainerSlotRecord
      "WHERE slot_record.record = ${recordId $ recordRow r} AND slot_record.container = ${containerId $ containerRow c} AND slot_record.segment && ${s}"
  ======>
    fmap
      (\ (vsegment_acO9v)
         -> Databrary.Model.RecordSlot.SQL.makeSlotRecord vsegment_acO9v)
      ((\ _p_acOaI _p_acOaJ _p_acOaK
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_acOaH
                  -> Database.PostgreSQL.Typed.Query.SimpleQuery
                       (Data.ByteString.concat
                          [Data.String.fromString
                             "SELECT slot_record.segment FROM slot_record WHERE slot_record.record = ",
                           Database.PostgreSQL.Typed.Types.pgEscapeParameter
                             _tenv_acOaH (PGTypeProxy :: PGTypeName "integer") _p_acOaI,
                           Data.String.fromString " AND slot_record.container = ",
                           Database.PostgreSQL.Typed.Types.pgEscapeParameter
                             _tenv_acOaH (PGTypeProxy :: PGTypeName "integer") _p_acOaJ,
                           Data.String.fromString " AND slot_record.segment && ",
                           Database.PostgreSQL.Typed.Types.pgEscapeParameter
                             _tenv_acOaH (PGTypeProxy :: PGTypeName "segment") _p_acOaK]))
               (\ _tenv_acOaH [_csegment_acOaO]
                  -> (Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acOaH
                        (PGTypeProxy :: PGTypeName "segment")
                        _csegment_acOaO)))
         (recordId $ recordRow r) (containerId $ containerRow c) s)
src/Databrary/Model/RecordSlot.hs:62:26-209: Splicing expression
    selectQuery
      selectVolumeSlotMaybeRecord
      "WHERE container.volume = ${volumeId $ volumeRow v} ORDER BY container.id, record.category NULLS FIRST, slot_record.segment, slot_record.record"
  ======>
    fmap
      (\ (vid_acOiu, vtop_acOiv, vname_acOiw, vdate_acOix,
          vrelease_acOiy, vsegment_acOiz, vid_acOiA, vcategory_acOiB,
          vmeasures_acOiC, vc_acOiD)
         -> Databrary.Model.RecordSlot.SQL.makeVolumeSlotMaybeRecord
              (Container
                 (ContainerRow vid_acOiu vtop_acOiv vname_acOiw vdate_acOix)
                 vrelease_acOiy)
              (do { cm_acOiE <- fmap
                                  (\ x_acOiF
                                     -> Databrary.Model.RecordSlot.SQL.makeSlotRecord x_acOiF)
                                  vsegment_acOiz;
                    cm_acOiG <- do { Just
                                       (($)
                                          (Databrary.Model.Record.SQL.makeRecord
                                             vid_acOiA vcategory_acOiB vmeasures_acOiC)
                                          vc_acOiD) };
                    Just
                      (Databrary.Model.RecordSlot.SQL.makeContainerSlotRecord
                         cm_acOiE cm_acOiG) }))
      ((\ _p_acOrJ
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_acOrI
                  -> Database.PostgreSQL.Typed.Query.SimpleQuery
                       (Data.ByteString.concat
                          [Data.String.fromString
                             "SELECT container.id,container.top,container.name,container.date,slot_release.release,slot_record.segment,record.id,record.category,record.measures,record_release(record.id) FROM container LEFT JOIN slot_release ON container.id = slot_release.container AND slot_release.segment = '(,)' LEFT JOIN slot_record JOIN record_measures AS record ON slot_record.record = record.id ON container.id = slot_record.container AND container.volume = record.volume WHERE container.volume = ",
                           Database.PostgreSQL.Typed.Types.pgEscapeParameter
                             _tenv_acOrI (PGTypeProxy :: PGTypeName "integer") _p_acOrJ,
                           Data.String.fromString
                             " ORDER BY container.id, record.category NULLS FIRST, slot_record.segment, slot_record.record"]))
               (\ _tenv_acOrI
                  [_cid_acOrK,
                   _ctop_acOrL,
                   _cname_acOrM,
                   _cdate_acOrN,
                   _crelease_acOrO,
                   _csegment_acOrP,
                   _cid_acOrQ,
                   _ccategory_acOrR,
                   _cmeasures_acOrS,
                   _crecord_release_acOrT]
                  -> (Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acOrI (PGTypeProxy :: PGTypeName "integer") _cid_acOrK, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acOrI (PGTypeProxy :: PGTypeName "boolean") _ctop_acOrL, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_acOrI (PGTypeProxy :: PGTypeName "text") _cname_acOrM, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_acOrI (PGTypeProxy :: PGTypeName "date") _cdate_acOrN, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acOrI (PGTypeProxy :: PGTypeName "release") _crelease_acOrO, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acOrI (PGTypeProxy :: PGTypeName "segment") _csegment_acOrP, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acOrI (PGTypeProxy :: PGTypeName "integer") _cid_acOrQ, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acOrI
                        (PGTypeProxy :: PGTypeName "smallint")
                        _ccategory_acOrR, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acOrI (PGTypeProxy :: PGTypeName "text[]") _cmeasures_acOrS, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_acOrI
                        (PGTypeProxy :: PGTypeName "release")
                        _crecord_release_acOrT)))
         (volumeId $ volumeRow v))
src/Databrary/Model/RecordSlot.hs:67:26-183: Splicing expression
    selectQuery
      selectVolumeSlotMaybeRecordId
      "$WHERE container.volume = ${volumeId $ volumeRow v} ORDER BY container.id, slot_record.segment, slot_record.record"
  ======>
    fmap
      (\ (vid_acOuH, vtop_acOuI, vname_acOuJ, vdate_acOuK,
          vrelease_acOuL, vsegment_acOuM, vrecord_acOuN)
         -> Databrary.Model.RecordSlot.SQL.makeVolumeContainerTuple
              (Container
                 (ContainerRow vid_acOuH vtop_acOuI vname_acOuJ vdate_acOuK)
                 vrelease_acOuL)
              (do { cm_acOuX <- vsegment_acOuM;
                    cm_acOuY <- vrecord_acOuN;
                    Just
                      (Databrary.Model.RecordSlot.SQL.segmentRecordIdTuple
                         cm_acOuX cm_acOuY) }))
      ((\ _p_acOxj
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_acOxi
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT container.id,container.top,container.name,container.date,slot_release.release,slot_record.segment,slot_record.record FROM container LEFT JOIN slot_release ON container.id = slot_release.container AND slot_release.segment = '(,)' LEFT JOIN slot_record ON container.id = slot_record.container WHERE container.volume = $1 ORDER BY container.id, slot_record.segment, slot_record.record")
                       []
                       [Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_acOxi (PGTypeProxy :: PGTypeName "integer") _p_acOxj]
                       [Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_acOxi (PGTypeProxy :: PGTypeName "integer"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_acOxi (PGTypeProxy :: PGTypeName "boolean"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_acOxi (PGTypeProxy :: PGTypeName "text"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_acOxi (PGTypeProxy :: PGTypeName "date"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_acOxi (PGTypeProxy :: PGTypeName "release"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_acOxi (PGTypeProxy :: PGTypeName "segment"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_acOxi (PGTypeProxy :: PGTypeName "integer")])
               (\ _tenv_acOxi
                  [_cid_acOxk,
                   _ctop_acOxl,
                   _cname_acOxm,
                   _cdate_acOxn,
                   _crelease_acOxo,
                   _csegment_acOxp,
                   _crecord_acOxq]
                  -> (Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acOxi (PGTypeProxy :: PGTypeName "integer") _cid_acOxk, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acOxi (PGTypeProxy :: PGTypeName "boolean") _ctop_acOxl, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_acOxi (PGTypeProxy :: PGTypeName "text") _cname_acOxm, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_acOxi (PGTypeProxy :: PGTypeName "date") _cdate_acOxn, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acOxi (PGTypeProxy :: PGTypeName "release") _crelease_acOxo, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acOxi (PGTypeProxy :: PGTypeName "segment") _csegment_acOxp, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acOxi (PGTypeProxy :: PGTypeName "integer") _crecord_acOxq)))
         (volumeId $ volumeRow v))
src/Databrary/Model/RecordSlot.hs:71:24-128: Splicing expression
    selectQuery
      selectVolumeSlotIdRecord
      "WHERE record.volume = ${volumeId $ volumeRow v} ORDER BY container"
  ======>
    fmap
      (\ (vcontainer_acOyy, vsegment_acOyz, vid_acOyA, vcategory_acOyD,
          vmeasures_acOyE, vc_acOyF)
         -> Databrary.Model.RecordSlot.SQL.makeVolumeSlotIdRecord
              (SlotId vcontainer_acOyy vsegment_acOyz)
              (($)
                 (Databrary.Model.Record.SQL.makeRecord
                    vid_acOyA vcategory_acOyD vmeasures_acOyE)
                 vc_acOyF))
      ((\ _p_acODW
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_acODV
                  -> Database.PostgreSQL.Typed.Query.SimpleQuery
                       (Data.ByteString.concat
                          [Data.String.fromString
                             "SELECT slot_record.container,slot_record.segment,record.id,record.category,record.measures,record_release(record.id) FROM slot_record JOIN record_measures AS record ON slot_record.record = record.id WHERE record.volume = ",
                           Database.PostgreSQL.Typed.Types.pgEscapeParameter
                             _tenv_acODV (PGTypeProxy :: PGTypeName "integer") _p_acODW,
                           Data.String.fromString " ORDER BY container"]))
               (\ _tenv_acODV
                  [_ccontainer_acODX,
                   _csegment_acODY,
                   _cid_acODZ,
                   _ccategory_acOE0,
                   _cmeasures_acOE1,
                   _crecord_release_acOE2]
                  -> (Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acODV
                        (PGTypeProxy :: PGTypeName "integer")
                        _ccontainer_acODX, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acODV (PGTypeProxy :: PGTypeName "segment") _csegment_acODY, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acODV (PGTypeProxy :: PGTypeName "integer") _cid_acODZ, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acODV
                        (PGTypeProxy :: PGTypeName "smallint")
                        _ccategory_acOE0, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_acODV (PGTypeProxy :: PGTypeName "text[]") _cmeasures_acOE1, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_acODV
                        (PGTypeProxy :: PGTypeName "release")
                        _crecord_release_acOE2)))
         (volumeId $ volumeRow v))
src/Databrary/Model/RecordSlot.hs:79:45-71: Splicing expression
    deleteSlotRecord 'ident_acOEn 'rs_acOEf
  ======>
    (\ _p_acOFf _p_acOFg _p_acOFh _p_acOFi _p_acOFj
       -> Database.PostgreSQL.Typed.Query.QueryParser
            (\ _tenv_acOFe
               -> Database.PostgreSQL.Typed.Query.SimpleQuery
                    (Data.ByteString.concat
                       [Data.String.fromString
                          "WITH audit_row AS (DELETE FROM slot_record WHERE record = ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOFe (PGTypeProxy :: PGTypeName "integer") _p_acOFf,
                        Data.String.fromString " AND container = ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOFe (PGTypeProxy :: PGTypeName "integer") _p_acOFg,
                        Data.String.fromString " AND segment <@ ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOFe (PGTypeProxy :: PGTypeName "segment") _p_acOFh,
                        Data.String.fromString
                          " RETURNING *) INSERT INTO audit.slot_record SELECT CURRENT_TIMESTAMP, ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOFe (PGTypeProxy :: PGTypeName "integer") _p_acOFi,
                        Data.String.fromString ", ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOFe (PGTypeProxy :: PGTypeName "inet") _p_acOFj,
                        Data.String.fromString
                          ", 'remove'::audit.action, * FROM audit_row"]))
            (\ _tenv_acOFe [] -> ()))
      (recordId $ recordRow $ slotRecord rs)
      (containerId $ containerRow $ slotContainer $ recordSlot rs)
      (slotSegment $ recordSlot rs)
      (auditWho ident)
      (auditIp ident)
src/Databrary/Model/RecordSlot.hs:80:52-78: Splicing expression
    insertSlotRecord 'ident_acOEn 'rd_acOEk
  ======>
    (\ _p_acOOr _p_acOOs _p_acOOt _p_acOOu _p_acOOv
       -> Database.PostgreSQL.Typed.Query.QueryParser
            (\ _tenv_acOOp
               -> Database.PostgreSQL.Typed.Query.SimpleQuery
                    (Data.ByteString.concat
                       [Data.String.fromString
                          "WITH audit_row AS (INSERT INTO slot_record (record,container,segment) VALUES (",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOOp (PGTypeProxy :: PGTypeName "integer") _p_acOOr,
                        Data.String.fromString ",",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOOp (PGTypeProxy :: PGTypeName "integer") _p_acOOs,
                        Data.String.fromString ",",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOOp (PGTypeProxy :: PGTypeName "segment") _p_acOOt,
                        Data.String.fromString
                          ") RETURNING *) INSERT INTO audit.slot_record SELECT CURRENT_TIMESTAMP, ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOOp (PGTypeProxy :: PGTypeName "integer") _p_acOOu,
                        Data.String.fromString ", ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOOp (PGTypeProxy :: PGTypeName "inet") _p_acOOv,
                        Data.String.fromString ", 'add'::audit.action, * FROM audit_row"]))
            (\ _tenv_acOOp [] -> ()))
      (recordId $ recordRow $ slotRecord rd)
      (containerId $ containerRow $ slotContainer $ recordSlot rd)
      (slotSegment $ recordSlot rd)
      (auditWho ident)
      (auditIp ident)
src/Databrary/Model/RecordSlot.hs:81:52-83: Splicing expression
    updateSlotRecord 'ident_acOEn 'rs_acOEf 'dst_acOEj
  ======>
    (\ _p_acOUV _p_acOUW _p_acOUX _p_acOUY _p_acOUZ _p_acOV0
       -> Database.PostgreSQL.Typed.Query.QueryParser
            (\ _tenv_acOUU
               -> Database.PostgreSQL.Typed.Query.SimpleQuery
                    (Data.ByteString.concat
                       [Data.String.fromString
                          "WITH audit_row AS (UPDATE slot_record SET segment=",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOUU (PGTypeProxy :: PGTypeName "segment") _p_acOUV,
                        Data.String.fromString " WHERE record=",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOUU (PGTypeProxy :: PGTypeName "integer") _p_acOUW,
                        Data.String.fromString " AND container=",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOUU (PGTypeProxy :: PGTypeName "integer") _p_acOUX,
                        Data.String.fromString " AND segment=",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOUU (PGTypeProxy :: PGTypeName "segment") _p_acOUY,
                        Data.String.fromString
                          " RETURNING *) INSERT INTO audit.slot_record SELECT CURRENT_TIMESTAMP, ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOUU (PGTypeProxy :: PGTypeName "integer") _p_acOUZ,
                        Data.String.fromString ", ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOUU (PGTypeProxy :: PGTypeName "inet") _p_acOV0,
                        Data.String.fromString
                          ", 'change'::audit.action, * FROM audit_row"]))
            (\ _tenv_acOUU [] -> ()))
      dst
      (recordId $ recordRow $ slotRecord rs)
      (containerId $ containerRow $ slotContainer $ recordSlot rs)
      (slotSegment $ recordSlot rs)
      (auditWho ident)
      (auditIp ident)
src/Databrary/Model/RecordSlot.hs:89:15-111: Splicing expression
    auditDelete
      'ident_acOVR
      "slot_record"
      "record = ${recordId $ recordRow r} AND segment = '(,)'"
      Nothing
  ======>
    (\ _p_acOXg _p_acOXh _p_acOXi
       -> Database.PostgreSQL.Typed.Query.QueryParser
            (\ _tenv_acOXf
               -> Database.PostgreSQL.Typed.Query.SimpleQuery
                    (Data.ByteString.concat
                       [Data.String.fromString
                          "WITH audit_row AS (DELETE FROM slot_record WHERE record = ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOXf (PGTypeProxy :: PGTypeName "integer") _p_acOXg,
                        Data.String.fromString
                          " AND segment = '(,)' RETURNING *) INSERT INTO audit.slot_record SELECT CURRENT_TIMESTAMP, ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOXf (PGTypeProxy :: PGTypeName "integer") _p_acOXh,
                        Data.String.fromString ", ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_acOXf (PGTypeProxy :: PGTypeName "inet") _p_acOXi,
                        Data.String.fromString
                          ", 'remove'::audit.action, * FROM audit_row"]))
            (\ _tenv_acOXf [] -> ()))
      (recordId $ recordRow r) (auditWho ident) (auditIp ident)
