src/Databrary/Model/Tag.hs:43:14-68: Splicing expression
    selectQuery selectTag "$WHERE tag.name = ${n}::varchar"
  ======>
    fmap
      (\ (vid_a8sy9, vname_a8sya) -> Tag vid_a8sy9 vname_a8sya)
      ((\ _p_a8sA5
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_a8sA4
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT tag.id,tag.name FROM tag WHERE tag.name = $1::varchar")
                       []
                       [pgEncodeParameter
                          _tenv_a8sA4
                          (PGTypeProxy :: PGTypeName "character varying")
                          _p_a8sA5]
                       [pgBinaryColumn _tenv_a8sA4 (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn
                          _tenv_a8sA4 (PGTypeProxy :: PGTypeName "character varying")])
               (\ _tenv_a8sA4 [_cid_a8sA6, _cname_a8sA7]
                  -> (pgDecodeColumnNotNull
                        _tenv_a8sA4 (PGTypeProxy :: PGTypeName "integer") _cid_a8sA6, 
                      pgDecodeColumnNotNull
                        _tenv_a8sA4
                        (PGTypeProxy :: PGTypeName "character varying")
                        _cname_a8sA7)))
         n)
src/Databrary/Model/Tag.hs:70:13-120: Splicing expression
    selectQuery
      selectTag
      "$WHERE tag.name LIKE ${n `BSC.snoc` '%'}::varchar LIMIT ${fromIntegral lim :: Int64}"
  ======>
    fmap
      (\ (vid_a8AB8, vname_a8AB9) -> Tag vid_a8AB8 vname_a8AB9)
      ((\ _p_a8ABi _p_a8ABj
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_a8ABh
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT tag.id,tag.name FROM tag WHERE tag.name LIKE $1::varchar LIMIT $2")
                       []
                       [pgEncodeParameter
                          _tenv_a8ABh
                          (PGTypeProxy :: PGTypeName "character varying")
                          _p_a8ABi,
                        pgEncodeParameter
                          _tenv_a8ABh (PGTypeProxy :: PGTypeName "bigint") _p_a8ABj]
                       [pgBinaryColumn _tenv_a8ABh (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn
                          _tenv_a8ABh (PGTypeProxy :: PGTypeName "character varying")])
               (\ _tenv_a8ABh [_cid_a8ABk, _cname_a8ABl]
                  -> (pgDecodeColumnNotNull
                        _tenv_a8ABh (PGTypeProxy :: PGTypeName "integer") _cid_a8ABk, 
                      pgDecodeColumnNotNull
                        _tenv_a8ABh
                        (PGTypeProxy :: PGTypeName "character varying")
                        _cname_a8ABl)))
         (n `BSC.snoc` '%') (fromIntegral lim :: Int64))
src/Databrary/Model/Tag.hs:305:13-104: Splicing expression
    selectQuery
      (selectTagWeight "")
      "$!ORDER BY weight DESC LIMIT ${fromIntegral lim :: Int64}"
  ======>
    fmap
      (\ (vweight_a8ACZ, vid_a8AD0, vname_a8AD1)
         -> ($)
              (Databrary.Model.Tag.SQL.makeTagWeight vweight_a8ACZ)
              (Tag vid_a8AD0 vname_a8AD1))
      ((\ _p_a8AEe
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_a8AEd
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT tag_weight.weight,tag.id,tag.name FROM (SELECT tag,count(*)::integer AS weight FROM tag_use  GROUP BY tag) AS tag_weight JOIN tag ON tag_weight.tag = tag.id ORDER BY weight DESC LIMIT $1")
                       []
                       [pgEncodeParameter
                          _tenv_a8AEd (PGTypeProxy :: PGTypeName "bigint") _p_a8AEe]
                       [pgBinaryColumn _tenv_a8AEd (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_a8AEd (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn
                          _tenv_a8AEd (PGTypeProxy :: PGTypeName "character varying")])
               (\ _tenv_a8AEd [_cweight_a8AEf, _cid_a8AEg, _cname_a8AEh]
                  -> (pgDecodeColumnNotNull
                        _tenv_a8AEd (PGTypeProxy :: PGTypeName "integer") _cweight_a8AEf, 
                      pgDecodeColumnNotNull
                        _tenv_a8AEd (PGTypeProxy :: PGTypeName "integer") _cid_a8AEg, 
                      pgDecodeColumnNotNull
                        _tenv_a8AEd
                        (PGTypeProxy :: PGTypeName "character varying")
                        _cname_a8AEh)))
         (fromIntegral lim :: Int64))
src/Databrary/Model/Tag.hs:313:70-205: Splicing expression
    selectQuery
      (selectTagCoverage
         'ident_a8AEu
         "WHERE container = ${containerId $ containerRow c} AND segment && ${s} AND tag = ${tagId t}")
      "$!"
  ======>
    fmap
      (\ (vweight_a8AEM, vcoverage_a8AEN, vkeywords_a8AEO, vvotes_a8AEP)
         -> Databrary.Model.Tag.SQL.makeTagCoverage
              vweight_a8AEM vcoverage_a8AEN vkeywords_a8AEO vvotes_a8AEP)
      ((\ _p_a8AFe _p_a8AFf _p_a8AFg _p_a8AFh
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_a8AFd
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT tag_coverage.weight,tag_coverage.coverage,tag_coverage.keywords,tag_coverage.votes FROM (SELECT tag,count(*)::integer AS weight,segments_union(segment) AS coverage,segments_union(CASE WHEN tableoid = 'keyword_use'::regclass THEN segment ELSE 'empty' END) AS keywords,segments_union(CASE WHEN tableoid = 'tag_use'::regclass AND who = $1 THEN segment ELSE 'empty' END) AS votes FROM tag_use WHERE container = $2 AND segment && $3 AND tag = $4 GROUP BY tag) AS tag_coverage ")
                       []
                       [pgEncodeParameter
                          _tenv_a8AFd (PGTypeProxy :: PGTypeName "integer") _p_a8AFe,
                        pgEncodeParameter
                          _tenv_a8AFd (PGTypeProxy :: PGTypeName "integer") _p_a8AFf,
                        pgEncodeParameter
                          _tenv_a8AFd (PGTypeProxy :: PGTypeName "segment") _p_a8AFg,
                        pgEncodeParameter
                          _tenv_a8AFd (PGTypeProxy :: PGTypeName "integer") _p_a8AFh]
                       [pgBinaryColumn _tenv_a8AFd (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_a8AFd (PGTypeProxy :: PGTypeName "segment[]"),
                        pgBinaryColumn _tenv_a8AFd (PGTypeProxy :: PGTypeName "segment[]"),
                        pgBinaryColumn
                          _tenv_a8AFd (PGTypeProxy :: PGTypeName "segment[]")])
               (\ _tenv_a8AFd
                  [_cweight_a8AFj, _ccoverage_a8AFk, _ckeywords_a8AFl, _cvotes_a8AFm]
                  -> (pgDecodeColumnNotNull
                        _tenv_a8AFd (PGTypeProxy :: PGTypeName "integer") _cweight_a8AFj, 
                      pgDecodeColumnNotNull
                        _tenv_a8AFd
                        (PGTypeProxy :: PGTypeName "segment[]")
                        _ccoverage_a8AFk, 
                      pgDecodeColumnNotNull
                        _tenv_a8AFd
                        (PGTypeProxy :: PGTypeName "segment[]")
                        _ckeywords_a8AFl, 
                      pgDecodeColumnNotNull
                        _tenv_a8AFd
                        (PGTypeProxy :: PGTypeName "segment[]")
                        _cvotes_a8AFm)))
         (partyId $ partyRow ident)
         (containerId $ containerRow c)
         s
         (tagId t))
src/Databrary/Model/Tag.hs:318:13-120: Splicing expression
    selectQuery
      (selectSlotTagCoverage 'ident_a8AGb 'slot_a8AG9)
      "$!ORDER BY weight DESC LIMIT ${fromIntegral lim :: Int64}"
  ======>
    fmap
      (\ (vweight_a8AGn, vcoverage_a8AGo, vkeywords_a8AGp, vvotes_a8AGq,
          vid_a8AGr, vname_a8AGs)
         -> ($)
              (Databrary.Model.Tag.SQL.makeTagCoverage
                 vweight_a8AGn vcoverage_a8AGo vkeywords_a8AGp vvotes_a8AGq)
              (Tag vid_a8AGr vname_a8AGs)
              (slotContainer slot_a8AG9))
      ((\ _p_a8AGW _p_a8AGX _p_a8AGY _p_a8AGZ
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_a8AGV
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT tag_coverage.weight,tag_coverage.coverage,tag_coverage.keywords,tag_coverage.votes,tag.id,tag.name FROM (SELECT tag,count(*)::integer AS weight,segments_union(segment) AS coverage,segments_union(CASE WHEN tableoid = 'keyword_use'::regclass THEN segment ELSE 'empty' END) AS keywords,segments_union(CASE WHEN tableoid = 'tag_use'::regclass AND who = $1 THEN segment ELSE 'empty' END) AS votes FROM tag_use WHERE container = $2 AND segment && $3 GROUP BY tag) AS tag_coverage JOIN tag ON tag_coverage.tag = tag.id ORDER BY weight DESC LIMIT $4")
                       []
                       [pgEncodeParameter
                          _tenv_a8AGV (PGTypeProxy :: PGTypeName "integer") _p_a8AGW,
                        pgEncodeParameter
                          _tenv_a8AGV (PGTypeProxy :: PGTypeName "integer") _p_a8AGX,
                        pgEncodeParameter
                          _tenv_a8AGV (PGTypeProxy :: PGTypeName "segment") _p_a8AGY,
                        pgEncodeParameter
                          _tenv_a8AGV (PGTypeProxy :: PGTypeName "bigint") _p_a8AGZ]
                       [pgBinaryColumn _tenv_a8AGV (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_a8AGV (PGTypeProxy :: PGTypeName "segment[]"),
                        pgBinaryColumn _tenv_a8AGV (PGTypeProxy :: PGTypeName "segment[]"),
                        pgBinaryColumn _tenv_a8AGV (PGTypeProxy :: PGTypeName "segment[]"),
                        pgBinaryColumn _tenv_a8AGV (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn
                          _tenv_a8AGV (PGTypeProxy :: PGTypeName "character varying")])
               (\ _tenv_a8AGV
                  [_cweight_a8AH0,
                   _ccoverage_a8AH2,
                   _ckeywords_a8AH3,
                   _cvotes_a8AH4,
                   _cid_a8AH5,
                   _cname_a8AH6]
                  -> (pgDecodeColumnNotNull
                        _tenv_a8AGV (PGTypeProxy :: PGTypeName "integer") _cweight_a8AH0, 
                      pgDecodeColumnNotNull
                        _tenv_a8AGV
                        (PGTypeProxy :: PGTypeName "segment[]")
                        _ccoverage_a8AH2, 
                      pgDecodeColumnNotNull
                        _tenv_a8AGV
                        (PGTypeProxy :: PGTypeName "segment[]")
                        _ckeywords_a8AH3, 
                      pgDecodeColumnNotNull
                        _tenv_a8AGV (PGTypeProxy :: PGTypeName "segment[]") _cvotes_a8AH4, 
                      pgDecodeColumnNotNull
                        _tenv_a8AGV (PGTypeProxy :: PGTypeName "integer") _cid_a8AH5, 
                      pgDecodeColumnNotNull
                        _tenv_a8AGV
                        (PGTypeProxy :: PGTypeName "character varying")
                        _cname_a8AH6)))
         (partyId $ partyRow ident)
         (containerId $ containerRow $ slotContainer slot)
         (slotSegment slot)
         (fromIntegral lim :: Int64))
