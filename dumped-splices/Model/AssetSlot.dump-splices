src/Databrary/Model/AssetSlot.hs:59:14-75: Splicing expression
    selectQuery
      (selectAssetSlot 'ident_abkL5) "$WHERE asset.id = ${ai}"
  ======>
    fmap
      (\ (vid_abkMN, vformat_abkMO, vrelease_abkMP, vduration_abkMQ,
          vname_abkMR, vc_abkMS, vsize_abkMT, vsegment_abkMU, vid_abkMV,
          vtop_abkMW, vname_abkMX, vdate_abkMY, vrelease_abkMZ, vid_abkN0,
          vname_abkN1, vbody_abkN2, valias_abkN3, vdoi_abkN4, vc_abkN5,
          vowners_abkN6, vpermission_abkN7, vfull_abkN8)
         -> ($)
              (Databrary.Model.AssetSlot.SQL.makeVolumeAssetSlot
                 (Databrary.Model.Asset.SQL.makeAssetRow
                    vid_abkMN
                    vformat_abkMO
                    vrelease_abkMP
                    vduration_abkMQ
                    vname_abkMR
                    vc_abkMS
                    vsize_abkMT)
                 (do { cm_abkN9 <- vsegment_abkMU;
                       cm_abkNa <- do { cm_abkNb <- do { cm_abkNc <- vid_abkMV;
                                                         cm_abkNd <- vtop_abkMW;
                                                         Just
                                                           (ContainerRow
                                                              cm_abkNc
                                                              cm_abkNd
                                                              vname_abkMX
                                                              vdate_abkMY) };
                                        Just (Container cm_abkNb vrelease_abkMZ) };
                       Just
                         (Databrary.Model.AssetSlot.SQL.makeAssetSlotAsset
                            cm_abkN9 cm_abkNa) }))
              (Databrary.Model.Volume.SQL.makeVolume
                 (Databrary.Model.Volume.SQL.setCreation
                    (VolumeRow
                       vid_abkN0 vname_abkN1 vbody_abkN2 valias_abkN3 vdoi_abkN4)
                    vc_abkN5)
                 vowners_abkN6
                 (Databrary.Model.Volume.SQL.makePermInfo
                    vpermission_abkN7 vfull_abkN8)))
      ((\ _p_abkNV _p_abkNW _p_abkNX _p_abkNY _p_abkNZ
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_abkNU
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (fromString
                          "SELECT asset.id,asset.format,asset.release,asset.duration,asset.name,asset.sha1,asset.size,slot_asset.segment,container.id,container.top,container.name,container.date,slot_release.release,volume.id,volume.name,volume.body,volume.alias,volume.doi,volume_creation(volume.id),volume_owners.owners,volume_permission.permission,volume_permission.share_full FROM asset LEFT JOIN slot_asset JOIN container LEFT JOIN slot_release ON container.id = slot_release.container AND slot_release.segment = '(,)' ON slot_asset.container = container.id ON asset.id = slot_asset.asset AND asset.volume = container.volume JOIN volume LEFT JOIN volume_owners ON volume.id = volume_owners.volume JOIN LATERAL   (VALUES      ( CASE WHEN $1              THEN enum_last(NULL::permission)              ELSE volume_access_check(volume.id, $2) END      , CASE WHEN $3              THEN null              ELSE (select share_full                    from volume_access_view                    where volume = volume.id and party = $4                    limit 1) END )   ) AS volume_permission (permission, share_full) ON volume_permission.permission >= 'PUBLIC'::permission ON asset.volume = volume.id WHERE asset.id = $5")
                       []
                       [pgEncodeParameter
                          _tenv_abkNU (PGTypeProxy :: PGTypeName "boolean") _p_abkNV,
                        pgEncodeParameter
                          _tenv_abkNU (PGTypeProxy :: PGTypeName "integer") _p_abkNW,
                        pgEncodeParameter
                          _tenv_abkNU (PGTypeProxy :: PGTypeName "boolean") _p_abkNX,
                        pgEncodeParameter
                          _tenv_abkNU (PGTypeProxy :: PGTypeName "integer") _p_abkNY,
                        pgEncodeParameter
                          _tenv_abkNU (PGTypeProxy :: PGTypeName "integer") _p_abkNZ]
                       [pgBinaryColumn _tenv_abkNU (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_abkNU (PGTypeProxy :: PGTypeName "smallint"),
                        pgBinaryColumn _tenv_abkNU (PGTypeProxy :: PGTypeName "release"),
                        pgBinaryColumn _tenv_abkNU (PGTypeProxy :: PGTypeName "interval"),
                        pgBinaryColumn _tenv_abkNU (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_abkNU (PGTypeProxy :: PGTypeName "bytea"),
                        pgBinaryColumn _tenv_abkNU (PGTypeProxy :: PGTypeName "bigint"),
                        pgBinaryColumn _tenv_abkNU (PGTypeProxy :: PGTypeName "segment"),
                        pgBinaryColumn _tenv_abkNU (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_abkNU (PGTypeProxy :: PGTypeName "boolean"),
                        pgBinaryColumn _tenv_abkNU (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_abkNU (PGTypeProxy :: PGTypeName "date"),
                        pgBinaryColumn _tenv_abkNU (PGTypeProxy :: PGTypeName "release"),
                        pgBinaryColumn _tenv_abkNU (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_abkNU (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_abkNU (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn
                          _tenv_abkNU (PGTypeProxy :: PGTypeName "character varying"),
                        pgBinaryColumn
                          _tenv_abkNU (PGTypeProxy :: PGTypeName "character varying"),
                        pgBinaryColumn
                          _tenv_abkNU (PGTypeProxy :: PGTypeName "timestamp with time zone"),
                        pgBinaryColumn _tenv_abkNU (PGTypeProxy :: PGTypeName "text[]"),
                        pgBinaryColumn
                          _tenv_abkNU (PGTypeProxy :: PGTypeName "permission"),
                        pgBinaryColumn _tenv_abkNU (PGTypeProxy :: PGTypeName "boolean")])
               (\ _tenv_abkNU
                  [_cid_abkO0,
                   _cformat_abkO1,
                   _crelease_abkO2,
                   _cduration_abkO3,
                   _cname_abkO4,
                   _csha1_abkO5,
                   _csize_abkO6,
                   _csegment_abkO7,
                   _cid_abkO8,
                   _ctop_abkO9,
                   _cname_abkOa,
                   _cdate_abkOb,
                   _crelease_abkOc,
                   _cid_abkOd,
                   _cname_abkOe,
                   _cbody_abkOf,
                   _calias_abkOg,
                   _cdoi_abkOh,
                   _cvolume_creation_abkOi,
                   _cowners_abkOj,
                   _cpermission_abkOk,
                   _cshare_full_abkOl]
                  -> (pgDecodeColumnNotNull
                        _tenv_abkNU (PGTypeProxy :: PGTypeName "integer") _cid_abkO0, 
                      pgDecodeColumnNotNull
                        _tenv_abkNU (PGTypeProxy :: PGTypeName "smallint") _cformat_abkO1, 
                      pgDecodeColumn
                        _tenv_abkNU (PGTypeProxy :: PGTypeName "release") _crelease_abkO2, 
                      pgDecodeColumn
                        _tenv_abkNU
                        (PGTypeProxy :: PGTypeName "interval")
                        _cduration_abkO3, 
                      pgDecodeColumn
                        _tenv_abkNU (PGTypeProxy :: PGTypeName "text") _cname_abkO4, 
                      pgDecodeColumn
                        _tenv_abkNU (PGTypeProxy :: PGTypeName "bytea") _csha1_abkO5, 
                      pgDecodeColumn
                        _tenv_abkNU (PGTypeProxy :: PGTypeName "bigint") _csize_abkO6, 
                      pgDecodeColumnNotNull
                        _tenv_abkNU (PGTypeProxy :: PGTypeName "segment") _csegment_abkO7, 
                      pgDecodeColumnNotNull
                        _tenv_abkNU (PGTypeProxy :: PGTypeName "integer") _cid_abkO8, 
                      pgDecodeColumnNotNull
                        _tenv_abkNU (PGTypeProxy :: PGTypeName "boolean") _ctop_abkO9, 
                      pgDecodeColumn
                        _tenv_abkNU (PGTypeProxy :: PGTypeName "text") _cname_abkOa, 
                      pgDecodeColumn
                        _tenv_abkNU (PGTypeProxy :: PGTypeName "date") _cdate_abkOb, 
                      pgDecodeColumnNotNull
                        _tenv_abkNU (PGTypeProxy :: PGTypeName "release") _crelease_abkOc, 
                      pgDecodeColumnNotNull
                        _tenv_abkNU (PGTypeProxy :: PGTypeName "integer") _cid_abkOd, 
                      pgDecodeColumnNotNull
                        _tenv_abkNU (PGTypeProxy :: PGTypeName "text") _cname_abkOe, 
                      pgDecodeColumn
                        _tenv_abkNU (PGTypeProxy :: PGTypeName "text") _cbody_abkOf, 
                      pgDecodeColumn
                        _tenv_abkNU
                        (PGTypeProxy :: PGTypeName "character varying")
                        _calias_abkOg, 
                      pgDecodeColumn
                        _tenv_abkNU
                        (PGTypeProxy :: PGTypeName "character varying")
                        _cdoi_abkOh, 
                      pgDecodeColumn
                        _tenv_abkNU
                        (PGTypeProxy :: PGTypeName "timestamp with time zone")
                        _cvolume_creation_abkOi, 
                      pgDecodeColumnNotNull
                        _tenv_abkNU (PGTypeProxy :: PGTypeName "text[]") _cowners_abkOj, 
                      pgDecodeColumn
                        _tenv_abkNU
                        (PGTypeProxy :: PGTypeName "permission")
                        _cpermission_abkOk, 
                      pgDecodeColumn
                        _tenv_abkNU
                        (PGTypeProxy :: PGTypeName "boolean")
                        _cshare_full_abkOl)))
         (identitySuperuser ident)
         (view ident :: Id Party)
         (identitySuperuser ident)
         (view ident :: Id Party)
         ai)
src/Databrary/Model/AssetSlot.hs:69:18-124: Splicing expression
    selectQuery
      (selectAssetSlot 'ident_abkOS)
      "$left join transcode tc on tc.orig = asset.id WHERE tc.asset = ${ai}"
  ======>
    fmap
      (\ (vid_abkPI, vformat_abkPJ, vrelease_abkPK, vduration_abkPL,
          vname_abkPM, vc_abkPN, vsize_abkPO, vsegment_abkPP, vid_abkPQ,
          vtop_abkPR, vname_abkPS, vdate_abkPT, vrelease_abkPU, vid_abkPV,
          vname_abkPW, vbody_abkPX, valias_abkPY, vdoi_abkPZ, vc_abkQ0,
          vowners_abkQ1, vpermission_abkQ2, vfull_abkQ3)
         -> ($)
              (Databrary.Model.AssetSlot.SQL.makeVolumeAssetSlot
                 (Databrary.Model.Asset.SQL.makeAssetRow
                    vid_abkPI
                    vformat_abkPJ
                    vrelease_abkPK
                    vduration_abkPL
                    vname_abkPM
                    vc_abkPN
                    vsize_abkPO)
                 (do { cm_abkQ4 <- vsegment_abkPP;
                       cm_abkQ5 <- do { cm_abkQ6 <- do { cm_abkQ7 <- vid_abkPQ;
                                                         cm_abkQ8 <- vtop_abkPR;
                                                         Just
                                                           (ContainerRow
                                                              cm_abkQ7
                                                              cm_abkQ8
                                                              vname_abkPS
                                                              vdate_abkPT) };
                                        Just (Container cm_abkQ6 vrelease_abkPU) };
                       Just
                         (Databrary.Model.AssetSlot.SQL.makeAssetSlotAsset
                            cm_abkQ4 cm_abkQ5) }))
              (Databrary.Model.Volume.SQL.makeVolume
                 (Databrary.Model.Volume.SQL.setCreation
                    (VolumeRow
                       vid_abkPV vname_abkPW vbody_abkPX valias_abkPY vdoi_abkPZ)
                    vc_abkQ0)
                 vowners_abkQ1
                 (Databrary.Model.Volume.SQL.makePermInfo
                    vpermission_abkQ2 vfull_abkQ3)))
      ((\ _p_abkQW _p_abkQX _p_abkQY _p_abkQZ _p_abkR0
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_abkQV
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (fromString
                          "SELECT asset.id,asset.format,asset.release,asset.duration,asset.name,asset.sha1,asset.size,slot_asset.segment,container.id,container.top,container.name,container.date,slot_release.release,volume.id,volume.name,volume.body,volume.alias,volume.doi,volume_creation(volume.id),volume_owners.owners,volume_permission.permission,volume_permission.share_full FROM asset LEFT JOIN slot_asset JOIN container LEFT JOIN slot_release ON container.id = slot_release.container AND slot_release.segment = '(,)' ON slot_asset.container = container.id ON asset.id = slot_asset.asset AND asset.volume = container.volume JOIN volume LEFT JOIN volume_owners ON volume.id = volume_owners.volume JOIN LATERAL   (VALUES      ( CASE WHEN $1              THEN enum_last(NULL::permission)              ELSE volume_access_check(volume.id, $2) END      , CASE WHEN $3              THEN null              ELSE (select share_full                    from volume_access_view                    where volume = volume.id and party = $4                    limit 1) END )   ) AS volume_permission (permission, share_full) ON volume_permission.permission >= 'PUBLIC'::permission ON asset.volume = volume.id left join transcode tc on tc.orig = asset.id WHERE tc.asset = $5")
                       []
                       [pgEncodeParameter
                          _tenv_abkQV (PGTypeProxy :: PGTypeName "boolean") _p_abkQW,
                        pgEncodeParameter
                          _tenv_abkQV (PGTypeProxy :: PGTypeName "integer") _p_abkQX,
                        pgEncodeParameter
                          _tenv_abkQV (PGTypeProxy :: PGTypeName "boolean") _p_abkQY,
                        pgEncodeParameter
                          _tenv_abkQV (PGTypeProxy :: PGTypeName "integer") _p_abkQZ,
                        pgEncodeParameter
                          _tenv_abkQV (PGTypeProxy :: PGTypeName "integer") _p_abkR0]
                       [pgBinaryColumn _tenv_abkQV (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_abkQV (PGTypeProxy :: PGTypeName "smallint"),
                        pgBinaryColumn _tenv_abkQV (PGTypeProxy :: PGTypeName "release"),
                        pgBinaryColumn _tenv_abkQV (PGTypeProxy :: PGTypeName "interval"),
                        pgBinaryColumn _tenv_abkQV (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_abkQV (PGTypeProxy :: PGTypeName "bytea"),
                        pgBinaryColumn _tenv_abkQV (PGTypeProxy :: PGTypeName "bigint"),
                        pgBinaryColumn _tenv_abkQV (PGTypeProxy :: PGTypeName "segment"),
                        pgBinaryColumn _tenv_abkQV (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_abkQV (PGTypeProxy :: PGTypeName "boolean"),
                        pgBinaryColumn _tenv_abkQV (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_abkQV (PGTypeProxy :: PGTypeName "date"),
                        pgBinaryColumn _tenv_abkQV (PGTypeProxy :: PGTypeName "release"),
                        pgBinaryColumn _tenv_abkQV (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_abkQV (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_abkQV (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn
                          _tenv_abkQV (PGTypeProxy :: PGTypeName "character varying"),
                        pgBinaryColumn
                          _tenv_abkQV (PGTypeProxy :: PGTypeName "character varying"),
                        pgBinaryColumn
                          _tenv_abkQV (PGTypeProxy :: PGTypeName "timestamp with time zone"),
                        pgBinaryColumn _tenv_abkQV (PGTypeProxy :: PGTypeName "text[]"),
                        pgBinaryColumn
                          _tenv_abkQV (PGTypeProxy :: PGTypeName "permission"),
                        pgBinaryColumn _tenv_abkQV (PGTypeProxy :: PGTypeName "boolean")])
               (\ _tenv_abkQV
                  [_cid_abkR1,
                   _cformat_abkR2,
                   _crelease_abkR3,
                   _cduration_abkR4,
                   _cname_abkR5,
                   _csha1_abkR6,
                   _csize_abkR7,
                   _csegment_abkR8,
                   _cid_abkR9,
                   _ctop_abkRa,
                   _cname_abkRb,
                   _cdate_abkRc,
                   _crelease_abkRd,
                   _cid_abkRe,
                   _cname_abkRf,
                   _cbody_abkRg,
                   _calias_abkRh,
                   _cdoi_abkRi,
                   _cvolume_creation_abkRj,
                   _cowners_abkRk,
                   _cpermission_abkRl,
                   _cshare_full_abkRm]
                  -> (pgDecodeColumnNotNull
                        _tenv_abkQV (PGTypeProxy :: PGTypeName "integer") _cid_abkR1, 
                      pgDecodeColumnNotNull
                        _tenv_abkQV (PGTypeProxy :: PGTypeName "smallint") _cformat_abkR2, 
                      pgDecodeColumn
                        _tenv_abkQV (PGTypeProxy :: PGTypeName "release") _crelease_abkR3, 
                      pgDecodeColumn
                        _tenv_abkQV
                        (PGTypeProxy :: PGTypeName "interval")
                        _cduration_abkR4, 
                      pgDecodeColumn
                        _tenv_abkQV (PGTypeProxy :: PGTypeName "text") _cname_abkR5, 
                      pgDecodeColumn
                        _tenv_abkQV (PGTypeProxy :: PGTypeName "bytea") _csha1_abkR6, 
                      pgDecodeColumn
                        _tenv_abkQV (PGTypeProxy :: PGTypeName "bigint") _csize_abkR7, 
                      pgDecodeColumnNotNull
                        _tenv_abkQV (PGTypeProxy :: PGTypeName "segment") _csegment_abkR8, 
                      pgDecodeColumnNotNull
                        _tenv_abkQV (PGTypeProxy :: PGTypeName "integer") _cid_abkR9, 
                      pgDecodeColumnNotNull
                        _tenv_abkQV (PGTypeProxy :: PGTypeName "boolean") _ctop_abkRa, 
                      pgDecodeColumn
                        _tenv_abkQV (PGTypeProxy :: PGTypeName "text") _cname_abkRb, 
                      pgDecodeColumn
                        _tenv_abkQV (PGTypeProxy :: PGTypeName "date") _cdate_abkRc, 
                      pgDecodeColumnNotNull
                        _tenv_abkQV (PGTypeProxy :: PGTypeName "release") _crelease_abkRd, 
                      pgDecodeColumnNotNull
                        _tenv_abkQV (PGTypeProxy :: PGTypeName "integer") _cid_abkRe, 
                      pgDecodeColumnNotNull
                        _tenv_abkQV (PGTypeProxy :: PGTypeName "text") _cname_abkRf, 
                      pgDecodeColumn
                        _tenv_abkQV (PGTypeProxy :: PGTypeName "text") _cbody_abkRg, 
                      pgDecodeColumn
                        _tenv_abkQV
                        (PGTypeProxy :: PGTypeName "character varying")
                        _calias_abkRh, 
                      pgDecodeColumn
                        _tenv_abkQV
                        (PGTypeProxy :: PGTypeName "character varying")
                        _cdoi_abkRi, 
                      pgDecodeColumn
                        _tenv_abkQV
                        (PGTypeProxy :: PGTypeName "timestamp with time zone")
                        _cvolume_creation_abkRj, 
                      pgDecodeColumnNotNull
                        _tenv_abkQV (PGTypeProxy :: PGTypeName "text[]") _cowners_abkRk, 
                      pgDecodeColumn
                        _tenv_abkQV
                        (PGTypeProxy :: PGTypeName "permission")
                        _cpermission_abkRl, 
                      pgDecodeColumn
                        _tenv_abkQV
                        (PGTypeProxy :: PGTypeName "boolean")
                        _cshare_full_abkRm)))
         (identitySuperuser ident)
         (view ident :: Id Party)
         (identitySuperuser ident)
         (view ident :: Id Party)
         ai)
src/Databrary/Model/AssetSlot.hs:73:18-164: Splicing expression
    selectQuery
      selectAssetSlotAsset
      "$WHERE slot_asset.asset = ${assetId $ assetRow a} AND container.volume = ${volumeId $ volumeRow $ assetVolume a}"
  ======>
    fmap
      (\ (vsegment_abkTH, vid_abkTI, vtop_abkTJ, vname_abkTK,
          vdate_abkTL, vrelease_abkTM)
         -> Databrary.Model.AssetSlot.SQL.makeAssetSlotAsset
              vsegment_abkTH
              (Container
                 (ContainerRow vid_abkTI vtop_abkTJ vname_abkTK vdate_abkTL)
                 vrelease_abkTM))
      ((\ _p_abl0I _p_abl0J
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_abl0H
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (fromString
                          "SELECT slot_asset.segment,container.id,container.top,container.name,container.date,slot_release.release FROM slot_asset JOIN container LEFT JOIN slot_release ON container.id = slot_release.container AND slot_release.segment = '(,)' ON slot_asset.container = container.id WHERE slot_asset.asset = $1 AND container.volume = $2")
                       []
                       [pgEncodeParameter
                          _tenv_abl0H (PGTypeProxy :: PGTypeName "integer") _p_abl0I,
                        pgEncodeParameter
                          _tenv_abl0H (PGTypeProxy :: PGTypeName "integer") _p_abl0J]
                       [pgBinaryColumn _tenv_abl0H (PGTypeProxy :: PGTypeName "segment"),
                        pgBinaryColumn _tenv_abl0H (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_abl0H (PGTypeProxy :: PGTypeName "boolean"),
                        pgBinaryColumn _tenv_abl0H (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_abl0H (PGTypeProxy :: PGTypeName "date"),
                        pgBinaryColumn _tenv_abl0H (PGTypeProxy :: PGTypeName "release")])
               (\ _tenv_abl0H
                  [_csegment_abl0K,
                   _cid_abl0L,
                   _ctop_abl0M,
                   _cname_abl0N,
                   _cdate_abl0O,
                   _crelease_abl0P]
                  -> (pgDecodeColumnNotNull
                        _tenv_abl0H (PGTypeProxy :: PGTypeName "segment") _csegment_abl0K, 
                      pgDecodeColumnNotNull
                        _tenv_abl0H (PGTypeProxy :: PGTypeName "integer") _cid_abl0L, 
                      pgDecodeColumnNotNull
                        _tenv_abl0H (PGTypeProxy :: PGTypeName "boolean") _ctop_abl0M, 
                      pgDecodeColumn
                        _tenv_abl0H (PGTypeProxy :: PGTypeName "text") _cname_abl0N, 
                      pgDecodeColumn
                        _tenv_abl0H (PGTypeProxy :: PGTypeName "date") _cdate_abl0O, 
                      pgDecodeColumnNotNull
                        _tenv_abl0H
                        (PGTypeProxy :: PGTypeName "release")
                        _crelease_abl0P)))
         (assetId $ assetRow a) (volumeId $ volumeRow $ assetVolume a))
src/Databrary/Model/AssetSlot.hs:78:25-218: Splicing expression
    selectQuery
      selectContainerSlotAsset
      "$WHERE slot_asset.container = ${containerId $ containerRow c} AND slot_asset.segment && ${s} AND asset.volume = ${volumeId $ volumeRow $ containerVolume c}"
  ======>
    fmap
      (\ (vsegment_abl4Q, vid_abl4R, vformat_abl4S, vrelease_abl4T,
          vduration_abl4U, vname_abl4V, vc_abl4X, vsize_abl4Y)
         -> Databrary.Model.AssetSlot.SQL.makeContainerSlotAsset
              vsegment_abl4Q
              (Databrary.Model.Asset.SQL.makeAssetRow
                 vid_abl4R
                 vformat_abl4S
                 vrelease_abl4T
                 vduration_abl4U
                 vname_abl4V
                 vc_abl4X
                 vsize_abl4Y))
      ((\ _p_abl6X _p_abl6Y _p_abl6Z
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_abl6V
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (fromString
                          "SELECT slot_asset.segment,asset.id,asset.format,asset.release,asset.duration,asset.name,asset.sha1,asset.size FROM slot_asset JOIN asset ON slot_asset.asset = asset.id WHERE slot_asset.container = $1 AND slot_asset.segment && $2 AND asset.volume = $3")
                       []
                       [pgEncodeParameter
                          _tenv_abl6V (PGTypeProxy :: PGTypeName "integer") _p_abl6X,
                        pgEncodeParameter
                          _tenv_abl6V (PGTypeProxy :: PGTypeName "segment") _p_abl6Y,
                        pgEncodeParameter
                          _tenv_abl6V (PGTypeProxy :: PGTypeName "integer") _p_abl6Z]
                       [pgBinaryColumn _tenv_abl6V (PGTypeProxy :: PGTypeName "segment"),
                        pgBinaryColumn _tenv_abl6V (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_abl6V (PGTypeProxy :: PGTypeName "smallint"),
                        pgBinaryColumn _tenv_abl6V (PGTypeProxy :: PGTypeName "release"),
                        pgBinaryColumn _tenv_abl6V (PGTypeProxy :: PGTypeName "interval"),
                        pgBinaryColumn _tenv_abl6V (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_abl6V (PGTypeProxy :: PGTypeName "bytea"),
                        pgBinaryColumn _tenv_abl6V (PGTypeProxy :: PGTypeName "bigint")])
               (\ _tenv_abl6V
                  [_csegment_abl70,
                   _cid_abl71,
                   _cformat_abl72,
                   _crelease_abl73,
                   _cduration_abl74,
                   _cname_abl75,
                   _csha1_abl76,
                   _csize_abl77]
                  -> (pgDecodeColumnNotNull
                        _tenv_abl6V (PGTypeProxy :: PGTypeName "segment") _csegment_abl70, 
                      pgDecodeColumnNotNull
                        _tenv_abl6V (PGTypeProxy :: PGTypeName "integer") _cid_abl71, 
                      pgDecodeColumnNotNull
                        _tenv_abl6V (PGTypeProxy :: PGTypeName "smallint") _cformat_abl72, 
                      pgDecodeColumn
                        _tenv_abl6V (PGTypeProxy :: PGTypeName "release") _crelease_abl73, 
                      pgDecodeColumn
                        _tenv_abl6V
                        (PGTypeProxy :: PGTypeName "interval")
                        _cduration_abl74, 
                      pgDecodeColumn
                        _tenv_abl6V (PGTypeProxy :: PGTypeName "text") _cname_abl75, 
                      pgDecodeColumn
                        _tenv_abl6V (PGTypeProxy :: PGTypeName "bytea") _csha1_abl76, 
                      pgDecodeColumn
                        _tenv_abl6V (PGTypeProxy :: PGTypeName "bigint") _csize_abl77)))
         (containerId $ containerRow c)
         s
         (volumeId $ volumeRow $ containerVolume c))
src/Databrary/Model/AssetSlot.hs:(82,25)-(89,6): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      pgSQL
      "\n\
      \    SELECT asset.id,asset.format,output_asset.release,asset.duration,asset.name,asset.sha1,asset.size \n\
      \    FROM slot_asset \n\
      \    INNER JOIN transcode ON slot_asset.asset = transcode.asset\n\
      \    INNER JOIN asset ON transcode.orig = asset.id\n\
      \    INNER JOIN asset output_asset ON transcode.asset = output_asset.id\n\
      \    WHERE slot_asset.container = ${containerId $ containerRow c}\n\
      \    "
  ======>
    (\ _p_ablnp
       -> Database.PostgreSQL.Typed.Query.QueryParser
            (\ _tenv_ablno
               -> Database.PostgreSQL.Typed.Query.SimpleQuery
                    (Data.ByteString.concat
                       [fromString
                          "\n\
                          \    SELECT asset.id,asset.format,output_asset.release,asset.duration,asset.name,asset.sha1,asset.size \n\
                          \    FROM slot_asset \n\
                          \    INNER JOIN transcode ON slot_asset.asset = transcode.asset\n\
                          \    INNER JOIN asset ON transcode.orig = asset.id\n\
                          \    INNER JOIN asset output_asset ON transcode.asset = output_asset.id\n\
                          \    WHERE slot_asset.container = ",
                        pgEscapeParameter
                          _tenv_ablno (PGTypeProxy :: PGTypeName "integer") _p_ablnp,
                        fromString
                          "\n\
                          \    "]))
            (\ _tenv_ablno
               [_cid_ablnq,
                _cformat_ablnr,
                _crelease_ablns,
                _cduration_ablnt,
                _cname_ablnu,
                _csha1_ablnv,
                _csize_ablnw]
               -> (pgDecodeColumnNotNull
                     _tenv_ablno (PGTypeProxy :: PGTypeName "integer") _cid_ablnq, 
                   pgDecodeColumnNotNull
                     _tenv_ablno (PGTypeProxy :: PGTypeName "smallint") _cformat_ablnr, 
                   pgDecodeColumn
                     _tenv_ablno (PGTypeProxy :: PGTypeName "release") _crelease_ablns, 
                   pgDecodeColumn
                     _tenv_ablno
                     (PGTypeProxy :: PGTypeName "interval")
                     _cduration_ablnt, 
                   pgDecodeColumn
                     _tenv_ablno (PGTypeProxy :: PGTypeName "text") _cname_ablnu, 
                   pgDecodeColumn
                     _tenv_ablno (PGTypeProxy :: PGTypeName "bytea") _csha1_ablnv, 
                   pgDecodeColumn
                     _tenv_ablno (PGTypeProxy :: PGTypeName "bigint") _csize_ablnw)))
      (containerId $ containerRow c)
src/Databrary/Model/AssetSlot.hs:107:25-163: Splicing expression
    selectQuery
      selectVolumeSlotAsset
      "$WHERE asset.volume = ${volumeId $ volumeRow v} AND (container.top OR ${not top}) ORDER BY container.id"
  ======>
    fmap
      (\ (vsegment_ablre, vid_ablrf, vformat_ablrg, vrelease_ablrh,
          vduration_ablri, vname_ablrk, vc_ablrl, vsize_ablrn, vid_ablro,
          vtop_ablrp, vname_ablrr, vdate_ablrs, vrelease_ablrt)
         -> Databrary.Model.AssetSlot.SQL.makeVolumeSlotAsset
              vsegment_ablre
              (Databrary.Model.Asset.SQL.makeAssetRow
                 vid_ablrf
                 vformat_ablrg
                 vrelease_ablrh
                 vduration_ablri
                 vname_ablrk
                 vc_ablrl
                 vsize_ablrn)
              (Container
                 (ContainerRow vid_ablro vtop_ablrp vname_ablrr vdate_ablrs)
                 vrelease_ablrt))
      ((\ _p_ablxP _p_ablxQ
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_ablxO
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (fromString
                          "SELECT slot_asset.segment,asset.id,asset.format,asset.release,asset.duration,asset.name,asset.sha1,asset.size,container.id,container.top,container.name,container.date,slot_release.release FROM slot_asset JOIN asset ON slot_asset.asset = asset.id JOIN container LEFT JOIN slot_release ON container.id = slot_release.container AND slot_release.segment = '(,)' ON slot_asset.container = container.id AND asset.volume = container.volume WHERE asset.volume = $1 AND (container.top OR $2) ORDER BY container.id")
                       []
                       [pgEncodeParameter
                          _tenv_ablxO (PGTypeProxy :: PGTypeName "integer") _p_ablxP,
                        pgEncodeParameter
                          _tenv_ablxO (PGTypeProxy :: PGTypeName "boolean") _p_ablxQ]
                       [pgBinaryColumn _tenv_ablxO (PGTypeProxy :: PGTypeName "segment"),
                        pgBinaryColumn _tenv_ablxO (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_ablxO (PGTypeProxy :: PGTypeName "smallint"),
                        pgBinaryColumn _tenv_ablxO (PGTypeProxy :: PGTypeName "release"),
                        pgBinaryColumn _tenv_ablxO (PGTypeProxy :: PGTypeName "interval"),
                        pgBinaryColumn _tenv_ablxO (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_ablxO (PGTypeProxy :: PGTypeName "bytea"),
                        pgBinaryColumn _tenv_ablxO (PGTypeProxy :: PGTypeName "bigint"),
                        pgBinaryColumn _tenv_ablxO (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_ablxO (PGTypeProxy :: PGTypeName "boolean"),
                        pgBinaryColumn _tenv_ablxO (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_ablxO (PGTypeProxy :: PGTypeName "date"),
                        pgBinaryColumn _tenv_ablxO (PGTypeProxy :: PGTypeName "release")])
               (\ _tenv_ablxO
                  [_csegment_ablxR,
                   _cid_ablxS,
                   _cformat_ablxT,
                   _crelease_ablxU,
                   _cduration_ablxV,
                   _cname_ablxX,
                   _csha1_ablxY,
                   _csize_ablxZ,
                   _cid_ably0,
                   _ctop_ably2,
                   _cname_ably3,
                   _cdate_ably4,
                   _crelease_ably5]
                  -> (pgDecodeColumnNotNull
                        _tenv_ablxO (PGTypeProxy :: PGTypeName "segment") _csegment_ablxR, 
                      pgDecodeColumnNotNull
                        _tenv_ablxO (PGTypeProxy :: PGTypeName "integer") _cid_ablxS, 
                      pgDecodeColumnNotNull
                        _tenv_ablxO (PGTypeProxy :: PGTypeName "smallint") _cformat_ablxT, 
                      pgDecodeColumn
                        _tenv_ablxO (PGTypeProxy :: PGTypeName "release") _crelease_ablxU, 
                      pgDecodeColumn
                        _tenv_ablxO
                        (PGTypeProxy :: PGTypeName "interval")
                        _cduration_ablxV, 
                      pgDecodeColumn
                        _tenv_ablxO (PGTypeProxy :: PGTypeName "text") _cname_ablxX, 
                      pgDecodeColumn
                        _tenv_ablxO (PGTypeProxy :: PGTypeName "bytea") _csha1_ablxY, 
                      pgDecodeColumn
                        _tenv_ablxO (PGTypeProxy :: PGTypeName "bigint") _csize_ablxZ, 
                      pgDecodeColumnNotNull
                        _tenv_ablxO (PGTypeProxy :: PGTypeName "integer") _cid_ably0, 
                      pgDecodeColumnNotNull
                        _tenv_ablxO (PGTypeProxy :: PGTypeName "boolean") _ctop_ably2, 
                      pgDecodeColumn
                        _tenv_ablxO (PGTypeProxy :: PGTypeName "text") _cname_ably3, 
                      pgDecodeColumn
                        _tenv_ablxO (PGTypeProxy :: PGTypeName "date") _cdate_ably4, 
                      pgDecodeColumnNotNull
                        _tenv_ablxO
                        (PGTypeProxy :: PGTypeName "release")
                        _crelease_ably5)))
         (volumeId $ volumeRow v) (not top))
src/Databrary/Model/AssetSlot.hs:122:25-128: Splicing expression
    selectQuery
      selectVolumeSlotIdAsset
      "$WHERE asset.volume = ${volumeId $ volumeRow v} ORDER BY container"
  ======>
    fmap
      (\ (vcontainer_ablEx, vsegment_ablEy, vid_ablEz, vformat_ablEA,
          vrelease_ablEB, vduration_ablEC, vname_ablED, vc_ablEE,
          vsize_ablEF)
         -> Databrary.Model.AssetSlot.SQL.makeVolumeSlotIdAsset
              (SlotId vcontainer_ablEx vsegment_ablEy)
              (Databrary.Model.Asset.SQL.makeAssetRow
                 vid_ablEz
                 vformat_ablEA
                 vrelease_ablEB
                 vduration_ablEC
                 vname_ablED
                 vc_ablEE
                 vsize_ablEF))
      ((\ _p_ablFy
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_ablFx
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (fromString
                          "SELECT slot_asset.container,slot_asset.segment,asset.id,asset.format,asset.release,asset.duration,asset.name,asset.sha1,asset.size FROM slot_asset JOIN asset ON slot_asset.asset = asset.id WHERE asset.volume = $1 ORDER BY container")
                       []
                       [pgEncodeParameter
                          _tenv_ablFx (PGTypeProxy :: PGTypeName "integer") _p_ablFy]
                       [pgBinaryColumn _tenv_ablFx (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_ablFx (PGTypeProxy :: PGTypeName "segment"),
                        pgBinaryColumn _tenv_ablFx (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_ablFx (PGTypeProxy :: PGTypeName "smallint"),
                        pgBinaryColumn _tenv_ablFx (PGTypeProxy :: PGTypeName "release"),
                        pgBinaryColumn _tenv_ablFx (PGTypeProxy :: PGTypeName "interval"),
                        pgBinaryColumn _tenv_ablFx (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_ablFx (PGTypeProxy :: PGTypeName "bytea"),
                        pgBinaryColumn _tenv_ablFx (PGTypeProxy :: PGTypeName "bigint")])
               (\ _tenv_ablFx
                  [_ccontainer_ablFz,
                   _csegment_ablFA,
                   _cid_ablFB,
                   _cformat_ablFC,
                   _crelease_ablFD,
                   _cduration_ablFE,
                   _cname_ablFF,
                   _csha1_ablFG,
                   _csize_ablFH]
                  -> (pgDecodeColumnNotNull
                        _tenv_ablFx
                        (PGTypeProxy :: PGTypeName "integer")
                        _ccontainer_ablFz, 
                      pgDecodeColumnNotNull
                        _tenv_ablFx (PGTypeProxy :: PGTypeName "segment") _csegment_ablFA, 
                      pgDecodeColumnNotNull
                        _tenv_ablFx (PGTypeProxy :: PGTypeName "integer") _cid_ablFB, 
                      pgDecodeColumnNotNull
                        _tenv_ablFx (PGTypeProxy :: PGTypeName "smallint") _cformat_ablFC, 
                      pgDecodeColumn
                        _tenv_ablFx (PGTypeProxy :: PGTypeName "release") _crelease_ablFD, 
                      pgDecodeColumn
                        _tenv_ablFx
                        (PGTypeProxy :: PGTypeName "interval")
                        _cduration_ablFE, 
                      pgDecodeColumn
                        _tenv_ablFx (PGTypeProxy :: PGTypeName "text") _cname_ablFF, 
                      pgDecodeColumn
                        _tenv_ablFx (PGTypeProxy :: PGTypeName "bytea") _csha1_ablFG, 
                      pgDecodeColumn
                        _tenv_ablFx (PGTypeProxy :: PGTypeName "bigint") _csize_ablFH)))
         (volumeId $ volumeRow v))
src/Databrary/Model/AssetSlot.hs:260:23-142: Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      pgSQL
      "UPDATE slot_asset SET segment = segment(lower(segment), lower(segment) + ${dur}) WHERE asset = ${assetId $ assetRow a}"
  ======>
    (\ _p_ablLk _p_ablLl
       -> Database.PostgreSQL.Typed.Query.QueryParser
            (\ _tenv_ablLj
               -> Database.PostgreSQL.Typed.Query.SimpleQuery
                    (Data.ByteString.concat
                       [fromString
                          "UPDATE slot_asset SET segment = segment(lower(segment), lower(segment) + ",
                        pgEscapeParameter
                          _tenv_ablLj (PGTypeProxy :: PGTypeName "interval") _p_ablLk,
                        fromString ") WHERE asset = ",
                        pgEscapeParameter
                          _tenv_ablLj (PGTypeProxy :: PGTypeName "integer") _p_ablLl]))
            (\ _tenv_ablLj [] -> ()))
      dur (assetId $ assetRow a)
src/Databrary/Model/AssetSlot.hs:270:20-118: Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      pgSQL
      "SELECT max(upper(segment))+'1s' FROM slot_asset WHERE container = ${containerId $ containerRow c}"
  ======>
    (\ _p_ablQU
       -> Database.PostgreSQL.Typed.Query.QueryParser
            (\ _tenv_ablQT
               -> Database.PostgreSQL.Typed.Query.SimpleQuery
                    (Data.ByteString.concat
                       [fromString
                          "SELECT max(upper(segment))+'1s' FROM slot_asset WHERE container = ",
                        pgEscapeParameter
                          _tenv_ablQT (PGTypeProxy :: PGTypeName "integer") _p_ablQU]))
            (\ _tenv_ablQT [_ccolumn_ablQV]
               -> (pgDecodeColumn
                     _tenv_ablQT
                     (PGTypeProxy :: PGTypeName "interval")
                     _ccolumn_ablQV)))
      (containerId $ containerRow c)
