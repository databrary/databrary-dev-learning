Databrary/Model/Record.hs:46:14-73: Splicing expression
    selectQuery (selectRecord 'ident_a6PBS) "$WHERE record.id = ${ri}"
  ======>
    fmap
      (\ (vid_a6PC7, vcategory_a6PC8, vmeasures_a6PC9, vc_a6PCa,
          vid_a6PCb, vname_a6PCc, vbody_a6PCd, valias_a6PCe, vdoi_a6PCf,
          vc_a6PCg, vowners_a6PCh, vpermission_a6PCi)
         -> ($)
              (($)
                 (Databrary.Model.Record.SQL.makeRecord
                    vid_a6PC7 vcategory_a6PC8 vmeasures_a6PC9)
                 vc_a6PCa)
              (Databrary.Model.Volume.SQL.makeVolume
                 (Databrary.Model.Volume.SQL.setCreation
                    (VolumeRow
                       vid_a6PCb vname_a6PCc vbody_a6PCd valias_a6PCe vdoi_a6PCf)
                    vc_a6PCg)
                 vowners_a6PCh
                 vpermission_a6PCi))
      ((\ _p_a6PCG _p_a6PCH _p_a6PCI
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_a6PCF
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT record.id,record.category,record.measures,record_release(record.id),volume.id,volume.name,volume.body,volume.alias,volume.doi,volume_creation(volume.id),volume_owners.owners,volume_permission.permission FROM record_measures AS record JOIN volume LEFT JOIN volume_owners ON volume.id = volume_owners.volume JOIN LATERAL (VALUES (CASE WHEN $1 THEN enum_last(NULL::permission) ELSE volume_access_check(volume.id, $2) END)) AS volume_permission (permission) ON volume_permission.permission >= 'PUBLIC'::permission ON record.volume = volume.id WHERE record.id = $3")
                       []
                       [Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_a6PCF
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "boolean")
                          _p_a6PCG,
                        Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_a6PCF
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_a6PCH,
                        Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_a6PCF
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_a6PCI]
                       [Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PCF
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PCF
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "smallint"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PCF
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "text[]"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PCF
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PCF
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PCF
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "text"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PCF
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "text"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PCF
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "character varying"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PCF
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "character varying"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PCF
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "timestamp with time zone"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PCF
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "text[]"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PCF
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "permission")])
               (\ _tenv_a6PCF
                  [_cid_a6PCJ,
                   _ccategory_a6PCK,
                   _cmeasures_a6PCL,
                   _crecord_release_a6PCM,
                   _cid_a6PCN,
                   _cname_a6PCO,
                   _cbody_a6PCP,
                   _calias_a6PCQ,
                   _cdoi_a6PCR,
                   _cvolume_creation_a6PCS,
                   _cowners_a6PCT,
                   _cpermission_a6PCU]
                  -> (Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_a6PCF
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                        _cid_a6PCJ, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_a6PCF
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "smallint")
                        _ccategory_a6PCK, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_a6PCF
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "text[]")
                        _cmeasures_a6PCL, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_a6PCF
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "release")
                        _crecord_release_a6PCM, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_a6PCF
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                        _cid_a6PCN, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_a6PCF
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "text")
                        _cname_a6PCO, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_a6PCF
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "text")
                        _cbody_a6PCP, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_a6PCF
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "character varying")
                        _calias_a6PCQ, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_a6PCF
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "character varying")
                        _cdoi_a6PCR, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_a6PCF
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "timestamp with time zone")
                        _cvolume_creation_a6PCS, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_a6PCF
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "text[]")
                        _cowners_a6PCT, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_a6PCF
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "permission")
                        _cpermission_a6PCU)))
         (identitySuperuser ident) (view ident :: Id Party) ri)
Databrary/Model/Record.hs:50:29-133: Splicing expression
    selectQuery
      selectVolumeRecord
      "$WHERE record.id = ${ri} AND record.volume = ${volumeId $ volumeRow vol}"
  ======>
    fmap
      (\ (vid_a6PDF, vcategory_a6PDG, vmeasures_a6PDH, vc_a6PDI)
         -> ($)
              (Databrary.Model.Record.SQL.makeRecord
                 vid_a6PDF vcategory_a6PDG vmeasures_a6PDH)
              vc_a6PDI)
      ((\ _p_a6PEs _p_a6PEt
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_a6PEr
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT record.id,record.category,record.measures,record_release(record.id) FROM record_measures AS record WHERE record.id = $1 AND record.volume = $2")
                       []
                       [Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_a6PEr
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_a6PEs,
                        Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_a6PEr
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_a6PEt]
                       [Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PEr
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PEr
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "smallint"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PEr
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "text[]"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PEr
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release")])
               (\ _tenv_a6PEr
                  [_cid_a6PEu,
                   _ccategory_a6PEv,
                   _cmeasures_a6PEw,
                   _crecord_release_a6PEx]
                  -> (Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_a6PEr
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                        _cid_a6PEu, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_a6PEr
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "smallint")
                        _ccategory_a6PEv, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_a6PEr
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "text[]")
                        _cmeasures_a6PEw, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_a6PEr
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "release")
                        _crecord_release_a6PEx)))
         ri (volumeId $ volumeRow vol))
Databrary/Model/Record.hs:54:28-110: Splicing expression
    selectQuery
      selectVolumeRecord
      "$WHERE record.volume = ${volumeId $ volumeRow vol}"
  ======>
    fmap
      (\ (vid_a6PED, vcategory_a6PEE, vmeasures_a6PEF, vc_a6PEG)
         -> ($)
              (Databrary.Model.Record.SQL.makeRecord
                 vid_a6PED vcategory_a6PEE vmeasures_a6PEF)
              vc_a6PEG)
      ((\ _p_a6PFm
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_a6PFl
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT record.id,record.category,record.measures,record_release(record.id) FROM record_measures AS record WHERE record.volume = $1")
                       []
                       [Database.PostgreSQL.Typed.Types.pgEncodeParameter
                          _tenv_a6PFl
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_a6PFm]
                       [Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PFl
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PFl
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "smallint"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PFl
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "text[]"),
                        Database.PostgreSQL.Typed.Types.pgBinaryColumn
                          _tenv_a6PFl
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "release")])
               (\ _tenv_a6PFl
                  [_cid_a6PFn,
                   _ccategory_a6PFo,
                   _cmeasures_a6PFp,
                   _crecord_release_a6PFq]
                  -> (Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_a6PFl
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                        _cid_a6PFn, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_a6PFl
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "smallint")
                        _ccategory_a6PFo, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_a6PFl
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "text[]")
                        _cmeasures_a6PFp, 
                      Database.PostgreSQL.Typed.Types.pgDecodeColumn
                        _tenv_a6PFl
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "release")
                        _crecord_release_a6PFq)))
         (volumeId $ volumeRow vol))
Databrary/Model/Record.hs:59:15-37: Splicing expression
    insertRecord 'ident_a6PFI 'br_a6PFH
  ======>
    fmap
      (\ (vid_a6PGG)
         -> Databrary.Model.Record.SQL.setRecordId br_a6PFH vid_a6PGG)
      ((\ _p_a6PH2 _p_a6PH3 _p_a6PH4 _p_a6PH5
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_a6PH1
                  -> Database.PostgreSQL.Typed.Query.SimpleQuery
                       (Data.ByteString.concat
                          [Data.String.fromString
                             "WITH audit_row AS (INSERT INTO record (volume,category) VALUES (",
                           Database.PostgreSQL.Typed.Types.pgEscapeParameter
                             _tenv_a6PH1
                             (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                                Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                             _p_a6PH2,
                           Data.String.fromString ",",
                           Database.PostgreSQL.Typed.Types.pgEscapeParameter
                             _tenv_a6PH1
                             (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                                Database.PostgreSQL.Typed.Types.PGTypeName "smallint")
                             _p_a6PH3,
                           Data.String.fromString
                             ") RETURNING *) INSERT INTO audit.record SELECT CURRENT_TIMESTAMP, ",
                           Database.PostgreSQL.Typed.Types.pgEscapeParameter
                             _tenv_a6PH1
                             (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                                Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                             _p_a6PH4,
                           Data.String.fromString ", ",
                           Database.PostgreSQL.Typed.Types.pgEscapeParameter
                             _tenv_a6PH1
                             (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                                Database.PostgreSQL.Typed.Types.PGTypeName "inet")
                             _p_a6PH5,
                           Data.String.fromString
                             ", 'add'::audit.action, * FROM audit_row RETURNING record.id"]))
               (\ _tenv_a6PH1 [_cid_a6PH8]
                  -> (Database.PostgreSQL.Typed.Types.pgDecodeColumnNotNull
                        _tenv_a6PH1
                        (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                           Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                        _cid_a6PH8)))
         (volumeId $ volumeRow $ recordVolume br)
         (categoryId $ recordCategory $ recordRow br)
         (auditWho ident)
         (auditIp ident))
Databrary/Model/Record.hs:64:17-38: Splicing expression
    updateRecord 'ident_a6PIO 'r_a6PIN
  ======>
    (\ _p_a6PJR _p_a6PJS _p_a6PJT _p_a6PJU _p_a6PJV
       -> Database.PostgreSQL.Typed.Query.QueryParser
            (\ _tenv_a6PJQ
               -> Database.PostgreSQL.Typed.Query.SimpleQuery
                    (Data.ByteString.concat
                       [Data.String.fromString
                          "WITH audit_row AS (UPDATE record SET volume=",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_a6PJQ
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_a6PJR,
                        Data.String.fromString ",category=",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_a6PJQ
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "smallint")
                          _p_a6PJS,
                        Data.String.fromString " WHERE id=",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_a6PJQ
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_a6PJT,
                        Data.String.fromString
                          " RETURNING *) INSERT INTO audit.record SELECT CURRENT_TIMESTAMP, ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_a6PJQ
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_a6PJU,
                        Data.String.fromString ", ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_a6PJQ
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "inet")
                          _p_a6PJV,
                        Data.String.fromString
                          ", 'change'::audit.action, * FROM audit_row"]))
            (\ _tenv_a6PJQ [] -> ()))
      (volumeId $ volumeRow $ recordVolume r)
      (categoryId $ recordCategory $ recordRow r)
      (recordId $ recordRow r)
      (auditWho ident)
      (auditIp ident)
Databrary/Model/Record.hs:69:71-92: Splicing expression
    deleteRecord 'ident_a6PKG 'r_a6PKF
  ======>
    (\ _p_a6PMm _p_a6PMn _p_a6PMo
       -> Database.PostgreSQL.Typed.Query.QueryParser
            (\ _tenv_a6PMl
               -> Database.PostgreSQL.Typed.Query.SimpleQuery
                    (Data.ByteString.concat
                       [Data.String.fromString
                          "WITH audit_row AS (DELETE FROM record WHERE id=",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_a6PMl
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_a6PMm,
                        Data.String.fromString
                          " RETURNING *) INSERT INTO audit.record SELECT CURRENT_TIMESTAMP, ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_a6PMl
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "integer")
                          _p_a6PMn,
                        Data.String.fromString ", ",
                        Database.PostgreSQL.Typed.Types.pgEscapeParameter
                          _tenv_a6PMl
                          (Database.PostgreSQL.Typed.Types.PGTypeProxy ::
                             Database.PostgreSQL.Typed.Types.PGTypeName "inet")
                          _p_a6PMo,
                        Data.String.fromString
                          ", 'remove'::audit.action, * FROM audit_row"]))
            (\ _tenv_a6PMl [] -> ()))
      (recordId $ recordRow r) (auditWho ident) (auditIp ident)
