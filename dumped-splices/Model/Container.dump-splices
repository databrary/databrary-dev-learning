src/Databrary/Model/Container.hs:59:14-79: Splicing expression
    selectQuery
      (selectContainer 'ident_aaUcb) "$WHERE container.id = ${ci}"
  ======>
    fmap
      (\ (vid_abkLh, vtop_abkLi, vname_abkLj, vdate_abkLk,
          vrelease_abkLl, vid_abkLm, vname_abkLn, vbody_abkLo, valias_abkLp,
          vdoi_abkLq, vc_abkLr, vowners_abkLs, vpermission_abkLt,
          vfull_abkLu)
         -> ($)
              (Container
                 (ContainerRow vid_abkLh vtop_abkLi vname_abkLj vdate_abkLk)
                 vrelease_abkLl)
              (Databrary.Model.Volume.SQL.makeVolume
                 (Databrary.Model.Volume.SQL.setCreation
                    (VolumeRow
                       vid_abkLm vname_abkLn vbody_abkLo valias_abkLp vdoi_abkLq)
                    vc_abkLr)
                 vowners_abkLs
                 (Databrary.Model.Volume.SQL.makePermInfo
                    vpermission_abkLt vfull_abkLu)))
      ((\ _p_abkMo _p_abkMp _p_abkMq _p_abkMr _p_abkMs
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_abkMn
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT container.id,container.top,container.name,container.date,slot_release.release,volume.id,volume.name,volume.body,volume.alias,volume.doi,volume_creation(volume.id),volume_owners.owners,volume_permission.permission,volume_permission.share_full FROM container LEFT JOIN slot_release ON container.id = slot_release.container AND slot_release.segment = '(,)' JOIN volume LEFT JOIN volume_owners ON volume.id = volume_owners.volume JOIN LATERAL   (VALUES      ( CASE WHEN $1              THEN enum_last(NULL::permission)              ELSE volume_access_check(volume.id, $2) END      , CASE WHEN $3              THEN null              ELSE (select share_full                    from volume_access_view                    where volume = volume.id and party = $4                    limit 1) END )   ) AS volume_permission (permission, share_full) ON volume_permission.permission >= 'PUBLIC'::permission ON container.volume = volume.id WHERE container.id = $5")
                       []
                       [pgEncodeParameter
                          _tenv_abkMn (PGTypeProxy :: PGTypeName "boolean") _p_abkMo,
                        pgEncodeParameter
                          _tenv_abkMn (PGTypeProxy :: PGTypeName "integer") _p_abkMp,
                        pgEncodeParameter
                          _tenv_abkMn (PGTypeProxy :: PGTypeName "boolean") _p_abkMq,
                        pgEncodeParameter
                          _tenv_abkMn (PGTypeProxy :: PGTypeName "integer") _p_abkMr,
                        pgEncodeParameter
                          _tenv_abkMn (PGTypeProxy :: PGTypeName "integer") _p_abkMs]
                       [pgBinaryColumn _tenv_abkMn (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_abkMn (PGTypeProxy :: PGTypeName "boolean"),
                        pgBinaryColumn _tenv_abkMn (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_abkMn (PGTypeProxy :: PGTypeName "date"),
                        pgBinaryColumn _tenv_abkMn (PGTypeProxy :: PGTypeName "release"),
                        pgBinaryColumn _tenv_abkMn (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_abkMn (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_abkMn (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn
                          _tenv_abkMn (PGTypeProxy :: PGTypeName "character varying"),
                        pgBinaryColumn
                          _tenv_abkMn (PGTypeProxy :: PGTypeName "character varying"),
                        pgBinaryColumn
                          _tenv_abkMn (PGTypeProxy :: PGTypeName "timestamp with time zone"),
                        pgBinaryColumn _tenv_abkMn (PGTypeProxy :: PGTypeName "text[]"),
                        pgBinaryColumn
                          _tenv_abkMn (PGTypeProxy :: PGTypeName "permission"),
                        pgBinaryColumn _tenv_abkMn (PGTypeProxy :: PGTypeName "boolean")])
               (\ _tenv_abkMn
                  [_cid_abkMt,
                   _ctop_abkMu,
                   _cname_abkMv,
                   _cdate_abkMw,
                   _crelease_abkMx,
                   _cid_abkMy,
                   _cname_abkMz,
                   _cbody_abkMA,
                   _calias_abkMB,
                   _cdoi_abkMC,
                   _cvolume_creation_abkMD,
                   _cowners_abkME,
                   _cpermission_abkMF,
                   _cshare_full_abkMG]
                  -> (pgDecodeColumnNotNull
                        _tenv_abkMn (PGTypeProxy :: PGTypeName "integer") _cid_abkMt, 
                      pgDecodeColumnNotNull
                        _tenv_abkMn (PGTypeProxy :: PGTypeName "boolean") _ctop_abkMu, 
                      pgDecodeColumn
                        _tenv_abkMn (PGTypeProxy :: PGTypeName "text") _cname_abkMv, 
                      pgDecodeColumn
                        _tenv_abkMn (PGTypeProxy :: PGTypeName "date") _cdate_abkMw, 
                      pgDecodeColumnNotNull
                        _tenv_abkMn (PGTypeProxy :: PGTypeName "release") _crelease_abkMx, 
                      pgDecodeColumnNotNull
                        _tenv_abkMn (PGTypeProxy :: PGTypeName "integer") _cid_abkMy, 
                      pgDecodeColumnNotNull
                        _tenv_abkMn (PGTypeProxy :: PGTypeName "text") _cname_abkMz, 
                      pgDecodeColumn
                        _tenv_abkMn (PGTypeProxy :: PGTypeName "text") _cbody_abkMA, 
                      pgDecodeColumn
                        _tenv_abkMn
                        (PGTypeProxy :: PGTypeName "character varying")
                        _calias_abkMB, 
                      pgDecodeColumn
                        _tenv_abkMn
                        (PGTypeProxy :: PGTypeName "character varying")
                        _cdoi_abkMC, 
                      pgDecodeColumn
                        _tenv_abkMn
                        (PGTypeProxy :: PGTypeName "timestamp with time zone")
                        _cvolume_creation_abkMD, 
                      pgDecodeColumnNotNull
                        _tenv_abkMn (PGTypeProxy :: PGTypeName "text[]") _cowners_abkME, 
                      pgDecodeColumn
                        _tenv_abkMn
                        (PGTypeProxy :: PGTypeName "permission")
                        _cpermission_abkMF, 
                      pgDecodeColumn
                        _tenv_abkMn
                        (PGTypeProxy :: PGTypeName "boolean")
                        _cshare_full_abkMG)))
         (identitySuperuser ident)
         (view ident :: Id Party)
         (identitySuperuser ident)
         (view ident :: Id Party)
         ci)
src/Databrary/Model/Container.hs:63:29-142: Splicing expression
    selectQuery
      selectVolumeContainer
      "$WHERE container.id = ${ci} AND container.volume = ${volumeId $ volumeRow vol}"
  ======>
    fmap
      (\ (vid_abkNz, vtop_abkNA, vname_abkNB, vdate_abkNC,
          vrelease_abkND)
         -> Container
              (ContainerRow vid_abkNz vtop_abkNA vname_abkNB vdate_abkNC)
              vrelease_abkND)
      ((\ _p_abkOD _p_abkOE
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_abkOC
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT container.id,container.top,container.name,container.date,slot_release.release FROM container LEFT JOIN slot_release ON container.id = slot_release.container AND slot_release.segment = '(,)' WHERE container.id = $1 AND container.volume = $2")
                       []
                       [pgEncodeParameter
                          _tenv_abkOC (PGTypeProxy :: PGTypeName "integer") _p_abkOD,
                        pgEncodeParameter
                          _tenv_abkOC (PGTypeProxy :: PGTypeName "integer") _p_abkOE]
                       [pgBinaryColumn _tenv_abkOC (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_abkOC (PGTypeProxy :: PGTypeName "boolean"),
                        pgBinaryColumn _tenv_abkOC (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_abkOC (PGTypeProxy :: PGTypeName "date"),
                        pgBinaryColumn _tenv_abkOC (PGTypeProxy :: PGTypeName "release")])
               (\ _tenv_abkOC
                  [_cid_abkOF,
                   _ctop_abkOG,
                   _cname_abkOH,
                   _cdate_abkOI,
                   _crelease_abkOJ]
                  -> (pgDecodeColumnNotNull
                        _tenv_abkOC (PGTypeProxy :: PGTypeName "integer") _cid_abkOF, 
                      pgDecodeColumnNotNull
                        _tenv_abkOC (PGTypeProxy :: PGTypeName "boolean") _ctop_abkOG, 
                      pgDecodeColumn
                        _tenv_abkOC (PGTypeProxy :: PGTypeName "text") _cname_abkOH, 
                      pgDecodeColumn
                        _tenv_abkOC (PGTypeProxy :: PGTypeName "date") _cdate_abkOI, 
                      pgDecodeColumnNotNull
                        _tenv_abkOC
                        (PGTypeProxy :: PGTypeName "release")
                        _crelease_abkOJ)))
         ci (volumeId $ volumeRow vol))
src/Databrary/Model/Container.hs:67:28-138: Splicing expression
    selectQuery
      selectVolumeContainer
      "$WHERE container.volume = ${volumeId $ volumeRow vol} ORDER BY container.id"
  ======>
    fmap
      (\ (vid_abkPD, vtop_abkPE, vname_abkPF, vdate_abkPG,
          vrelease_abkPH)
         -> Container
              (ContainerRow vid_abkPD vtop_abkPE vname_abkPF vdate_abkPG)
              vrelease_abkPH)
      ((\ _p_abkQw
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_abkQv
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT container.id,container.top,container.name,container.date,slot_release.release FROM container LEFT JOIN slot_release ON container.id = slot_release.container AND slot_release.segment = '(,)' WHERE container.volume = $1 ORDER BY container.id")
                       []
                       [pgEncodeParameter
                          _tenv_abkQv (PGTypeProxy :: PGTypeName "integer") _p_abkQw]
                       [pgBinaryColumn _tenv_abkQv (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_abkQv (PGTypeProxy :: PGTypeName "boolean"),
                        pgBinaryColumn _tenv_abkQv (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_abkQv (PGTypeProxy :: PGTypeName "date"),
                        pgBinaryColumn _tenv_abkQv (PGTypeProxy :: PGTypeName "release")])
               (\ _tenv_abkQv
                  [_cid_abkQx,
                   _ctop_abkQy,
                   _cname_abkQz,
                   _cdate_abkQA,
                   _crelease_abkQB]
                  -> (pgDecodeColumnNotNull
                        _tenv_abkQv (PGTypeProxy :: PGTypeName "integer") _cid_abkQx, 
                      pgDecodeColumnNotNull
                        _tenv_abkQv (PGTypeProxy :: PGTypeName "boolean") _ctop_abkQy, 
                      pgDecodeColumn
                        _tenv_abkQv (PGTypeProxy :: PGTypeName "text") _cname_abkQz, 
                      pgDecodeColumn
                        _tenv_abkQv (PGTypeProxy :: PGTypeName "date") _cdate_abkQA, 
                      pgDecodeColumnNotNull
                        _tenv_abkQv
                        (PGTypeProxy :: PGTypeName "release")
                        _crelease_abkQB)))
         (volumeId $ volumeRow vol))
src/Databrary/Model/Container.hs:71:30-148: Splicing expression
    selectQuery
      selectVolumeContainer
      "$WHERE container.volume = ${volumeId $ volumeRow vol} ORDER BY container.id LIMIT 1"
  ======>
    fmap
      (\ (vid_abkRn, vtop_abkRo, vname_abkRp, vdate_abkRq,
          vrelease_abkRr)
         -> Container
              (ContainerRow vid_abkRn vtop_abkRo vname_abkRp vdate_abkRq)
              vrelease_abkRr)
      ((\ _p_abkRK
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_abkRJ
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT container.id,container.top,container.name,container.date,slot_release.release FROM container LEFT JOIN slot_release ON container.id = slot_release.container AND slot_release.segment = '(,)' WHERE container.volume = $1 ORDER BY container.id LIMIT 1")
                       []
                       [pgEncodeParameter
                          _tenv_abkRJ (PGTypeProxy :: PGTypeName "integer") _p_abkRK]
                       [pgBinaryColumn _tenv_abkRJ (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_abkRJ (PGTypeProxy :: PGTypeName "boolean"),
                        pgBinaryColumn _tenv_abkRJ (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_abkRJ (PGTypeProxy :: PGTypeName "date"),
                        pgBinaryColumn _tenv_abkRJ (PGTypeProxy :: PGTypeName "release")])
               (\ _tenv_abkRJ
                  [_cid_abkRL,
                   _ctop_abkRM,
                   _cname_abkRN,
                   _cdate_abkRO,
                   _crelease_abkRP]
                  -> (pgDecodeColumnNotNull
                        _tenv_abkRJ (PGTypeProxy :: PGTypeName "integer") _cid_abkRL, 
                      pgDecodeColumnNotNull
                        _tenv_abkRJ (PGTypeProxy :: PGTypeName "boolean") _ctop_abkRM, 
                      pgDecodeColumn
                        _tenv_abkRJ (PGTypeProxy :: PGTypeName "text") _cname_abkRN, 
                      pgDecodeColumn
                        _tenv_abkRJ (PGTypeProxy :: PGTypeName "date") _cdate_abkRO, 
                      pgDecodeColumnNotNull
                        _tenv_abkRJ
                        (PGTypeProxy :: PGTypeName "release")
                        _crelease_abkRP)))
         (volumeId $ volumeRow vol))
