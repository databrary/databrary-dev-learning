src/Databrary/Model/Asset.hs:56:14-71: Splicing expression
    selectQuery (selectAsset 'ident_aaAO7) "$WHERE asset.id = ${ai}"
  ======>
    fmap
      (\ (vid_aaAOJ, vformat_aaAOK, vrelease_aaAOL, vduration_aaAOM,
          vname_aaAON, vc_aaAOO, vsize_aaAOP, vid_aaAOQ, vname_aaAOR,
          vbody_aaAOS, valias_aaAOT, vdoi_aaAOU, vc_aaAOV, vowners_aaAOW,
          vpermission_aaAOX, vfull_aaAOY)
         -> Asset
              (makeAssetRow
                 vid_aaAOJ
                 vformat_aaAOK
                 vrelease_aaAOL
                 vduration_aaAOM
                 vname_aaAON
                 vc_aaAOO
                 vsize_aaAOP)
              (Databrary.Model.Volume.SQL.makeVolume
                 (Databrary.Model.Volume.SQL.setCreation
                    (VolumeRow
                       vid_aaAOQ vname_aaAOR vbody_aaAOS valias_aaAOT vdoi_aaAOU)
                    vc_aaAOV)
                 vowners_aaAOW
                 (Databrary.Model.Volume.SQL.makePermInfo
                    vpermission_aaAOX vfull_aaAOY)))
      ((\ _p_aaAQD _p_aaAQE _p_aaAQF _p_aaAQG _p_aaAQH
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_aaAQC
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT asset.id,asset.format,asset.release,asset.duration,asset.name,asset.sha1,asset.size,volume.id,volume.name,volume.body,volume.alias,volume.doi,volume_creation(volume.id),volume_owners.owners,volume_permission.permission,volume_permission.share_full FROM asset JOIN volume LEFT JOIN volume_owners ON volume.id = volume_owners.volume JOIN LATERAL   (VALUES      ( CASE WHEN $1              THEN enum_last(NULL::permission)              ELSE volume_access_check(volume.id, $2) END      , CASE WHEN $3              THEN null              ELSE (select share_full                    from volume_access_view                    where volume = volume.id and party = $4                    limit 1) END )   ) AS volume_permission (permission, share_full) ON volume_permission.permission >= 'PUBLIC'::permission ON asset.volume = volume.id WHERE asset.id = $5")
                       []
                       [pgEncodeParameter
                          _tenv_aaAQC (PGTypeProxy :: PGTypeName "boolean") _p_aaAQD,
                        pgEncodeParameter
                          _tenv_aaAQC (PGTypeProxy :: PGTypeName "integer") _p_aaAQE,
                        pgEncodeParameter
                          _tenv_aaAQC (PGTypeProxy :: PGTypeName "boolean") _p_aaAQF,
                        pgEncodeParameter
                          _tenv_aaAQC (PGTypeProxy :: PGTypeName "integer") _p_aaAQG,
                        pgEncodeParameter
                          _tenv_aaAQC (PGTypeProxy :: PGTypeName "integer") _p_aaAQH]
                       [pgBinaryColumn _tenv_aaAQC (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_aaAQC (PGTypeProxy :: PGTypeName "smallint"),
                        pgBinaryColumn _tenv_aaAQC (PGTypeProxy :: PGTypeName "release"),
                        pgBinaryColumn _tenv_aaAQC (PGTypeProxy :: PGTypeName "interval"),
                        pgBinaryColumn _tenv_aaAQC (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_aaAQC (PGTypeProxy :: PGTypeName "bytea"),
                        pgBinaryColumn _tenv_aaAQC (PGTypeProxy :: PGTypeName "bigint"),
                        pgBinaryColumn _tenv_aaAQC (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_aaAQC (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_aaAQC (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn
                          _tenv_aaAQC (PGTypeProxy :: PGTypeName "character varying"),
                        pgBinaryColumn
                          _tenv_aaAQC (PGTypeProxy :: PGTypeName "character varying"),
                        pgBinaryColumn
                          _tenv_aaAQC (PGTypeProxy :: PGTypeName "timestamp with time zone"),
                        pgBinaryColumn _tenv_aaAQC (PGTypeProxy :: PGTypeName "text[]"),
                        pgBinaryColumn
                          _tenv_aaAQC (PGTypeProxy :: PGTypeName "permission"),
                        pgBinaryColumn _tenv_aaAQC (PGTypeProxy :: PGTypeName "boolean")])
               (\ _tenv_aaAQC
                  [_cid_aaAQI,
                   _cformat_aaAQJ,
                   _crelease_aaAQK,
                   _cduration_aaAQL,
                   _cname_aaAQM,
                   _csha1_aaAQN,
                   _csize_aaAQO,
                   _cid_aaAQP,
                   _cname_aaAQQ,
                   _cbody_aaAQR,
                   _calias_aaAQS,
                   _cdoi_aaAQT,
                   _cvolume_creation_aaAQU,
                   _cowners_aaAQV,
                   _cpermission_aaAQW,
                   _cshare_full_aaAQX]
                  -> (pgDecodeColumnNotNull
                        _tenv_aaAQC (PGTypeProxy :: PGTypeName "integer") _cid_aaAQI, 
                      pgDecodeColumnNotNull
                        _tenv_aaAQC (PGTypeProxy :: PGTypeName "smallint") _cformat_aaAQJ, 
                      pgDecodeColumn
                        _tenv_aaAQC (PGTypeProxy :: PGTypeName "release") _crelease_aaAQK, 
                      pgDecodeColumn
                        _tenv_aaAQC
                        (PGTypeProxy :: PGTypeName "interval")
                        _cduration_aaAQL, 
                      pgDecodeColumn
                        _tenv_aaAQC (PGTypeProxy :: PGTypeName "text") _cname_aaAQM, 
                      pgDecodeColumn
                        _tenv_aaAQC (PGTypeProxy :: PGTypeName "bytea") _csha1_aaAQN, 
                      pgDecodeColumn
                        _tenv_aaAQC (PGTypeProxy :: PGTypeName "bigint") _csize_aaAQO, 
                      pgDecodeColumnNotNull
                        _tenv_aaAQC (PGTypeProxy :: PGTypeName "integer") _cid_aaAQP, 
                      pgDecodeColumnNotNull
                        _tenv_aaAQC (PGTypeProxy :: PGTypeName "text") _cname_aaAQQ, 
                      pgDecodeColumn
                        _tenv_aaAQC (PGTypeProxy :: PGTypeName "text") _cbody_aaAQR, 
                      pgDecodeColumn
                        _tenv_aaAQC
                        (PGTypeProxy :: PGTypeName "character varying")
                        _calias_aaAQS, 
                      pgDecodeColumn
                        _tenv_aaAQC
                        (PGTypeProxy :: PGTypeName "character varying")
                        _cdoi_aaAQT, 
                      pgDecodeColumn
                        _tenv_aaAQC
                        (PGTypeProxy :: PGTypeName "timestamp with time zone")
                        _cvolume_creation_aaAQU, 
                      pgDecodeColumnNotNull
                        _tenv_aaAQC (PGTypeProxy :: PGTypeName "text[]") _cowners_aaAQV, 
                      pgDecodeColumn
                        _tenv_aaAQC
                        (PGTypeProxy :: PGTypeName "permission")
                        _cpermission_aaAQW, 
                      pgDecodeColumn
                        _tenv_aaAQC
                        (PGTypeProxy :: PGTypeName "boolean")
                        _cshare_full_aaAQX)))
         (identitySuperuser ident)
         (view ident :: Id Party)
         (identitySuperuser ident)
         (view ident :: Id Party)
         ai)
src/Databrary/Model/Asset.hs:61:14-116: Splicing expression
    selectQuery
      (selectAsset 'ident_aaARO)
      "$left join transcode tc on tc.orig = asset.id WHERE asset.id = ${ai}"
  ======>
    fmap
      (\ (vid_aaAS9, vformat_aaASa, vrelease_aaASb, vduration_aaASc,
          vname_aaASd, vc_aaASe, vsize_aaASf, vid_aaASg, vname_aaASh,
          vbody_aaASi, valias_aaASj, vdoi_aaASk, vc_aaASl, vowners_aaASm,
          vpermission_aaASn, vfull_aaASo)
         -> Asset
              (makeAssetRow
                 vid_aaAS9
                 vformat_aaASa
                 vrelease_aaASb
                 vduration_aaASc
                 vname_aaASd
                 vc_aaASe
                 vsize_aaASf)
              (Databrary.Model.Volume.SQL.makeVolume
                 (Databrary.Model.Volume.SQL.setCreation
                    (VolumeRow
                       vid_aaASg vname_aaASh vbody_aaASi valias_aaASj vdoi_aaASk)
                    vc_aaASl)
                 vowners_aaASm
                 (Databrary.Model.Volume.SQL.makePermInfo
                    vpermission_aaASn vfull_aaASo)))
      ((\ _p_aaASW _p_aaASX _p_aaASY _p_aaASZ _p_aaAT0
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_aaASV
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT asset.id,asset.format,asset.release,asset.duration,asset.name,asset.sha1,asset.size,volume.id,volume.name,volume.body,volume.alias,volume.doi,volume_creation(volume.id),volume_owners.owners,volume_permission.permission,volume_permission.share_full FROM asset JOIN volume LEFT JOIN volume_owners ON volume.id = volume_owners.volume JOIN LATERAL   (VALUES      ( CASE WHEN $1              THEN enum_last(NULL::permission)              ELSE volume_access_check(volume.id, $2) END      , CASE WHEN $3              THEN null              ELSE (select share_full                    from volume_access_view                    where volume = volume.id and party = $4                    limit 1) END )   ) AS volume_permission (permission, share_full) ON volume_permission.permission >= 'PUBLIC'::permission ON asset.volume = volume.id left join transcode tc on tc.orig = asset.id WHERE asset.id = $5")
                       []
                       [pgEncodeParameter
                          _tenv_aaASV (PGTypeProxy :: PGTypeName "boolean") _p_aaASW,
                        pgEncodeParameter
                          _tenv_aaASV (PGTypeProxy :: PGTypeName "integer") _p_aaASX,
                        pgEncodeParameter
                          _tenv_aaASV (PGTypeProxy :: PGTypeName "boolean") _p_aaASY,
                        pgEncodeParameter
                          _tenv_aaASV (PGTypeProxy :: PGTypeName "integer") _p_aaASZ,
                        pgEncodeParameter
                          _tenv_aaASV (PGTypeProxy :: PGTypeName "integer") _p_aaAT0]
                       [pgBinaryColumn _tenv_aaASV (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_aaASV (PGTypeProxy :: PGTypeName "smallint"),
                        pgBinaryColumn _tenv_aaASV (PGTypeProxy :: PGTypeName "release"),
                        pgBinaryColumn _tenv_aaASV (PGTypeProxy :: PGTypeName "interval"),
                        pgBinaryColumn _tenv_aaASV (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_aaASV (PGTypeProxy :: PGTypeName "bytea"),
                        pgBinaryColumn _tenv_aaASV (PGTypeProxy :: PGTypeName "bigint"),
                        pgBinaryColumn _tenv_aaASV (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_aaASV (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_aaASV (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn
                          _tenv_aaASV (PGTypeProxy :: PGTypeName "character varying"),
                        pgBinaryColumn
                          _tenv_aaASV (PGTypeProxy :: PGTypeName "character varying"),
                        pgBinaryColumn
                          _tenv_aaASV (PGTypeProxy :: PGTypeName "timestamp with time zone"),
                        pgBinaryColumn _tenv_aaASV (PGTypeProxy :: PGTypeName "text[]"),
                        pgBinaryColumn
                          _tenv_aaASV (PGTypeProxy :: PGTypeName "permission"),
                        pgBinaryColumn _tenv_aaASV (PGTypeProxy :: PGTypeName "boolean")])
               (\ _tenv_aaASV
                  [_cid_aaAT1,
                   _cformat_aaAT2,
                   _crelease_aaAT3,
                   _cduration_aaAT4,
                   _cname_aaAT5,
                   _csha1_aaAT6,
                   _csize_aaAT7,
                   _cid_aaAT8,
                   _cname_aaAT9,
                   _cbody_aaATa,
                   _calias_aaATb,
                   _cdoi_aaATc,
                   _cvolume_creation_aaATd,
                   _cowners_aaATe,
                   _cpermission_aaATf,
                   _cshare_full_aaATg]
                  -> (pgDecodeColumnNotNull
                        _tenv_aaASV (PGTypeProxy :: PGTypeName "integer") _cid_aaAT1, 
                      pgDecodeColumnNotNull
                        _tenv_aaASV (PGTypeProxy :: PGTypeName "smallint") _cformat_aaAT2, 
                      pgDecodeColumn
                        _tenv_aaASV (PGTypeProxy :: PGTypeName "release") _crelease_aaAT3, 
                      pgDecodeColumn
                        _tenv_aaASV
                        (PGTypeProxy :: PGTypeName "interval")
                        _cduration_aaAT4, 
                      pgDecodeColumn
                        _tenv_aaASV (PGTypeProxy :: PGTypeName "text") _cname_aaAT5, 
                      pgDecodeColumn
                        _tenv_aaASV (PGTypeProxy :: PGTypeName "bytea") _csha1_aaAT6, 
                      pgDecodeColumn
                        _tenv_aaASV (PGTypeProxy :: PGTypeName "bigint") _csize_aaAT7, 
                      pgDecodeColumnNotNull
                        _tenv_aaASV (PGTypeProxy :: PGTypeName "integer") _cid_aaAT8, 
                      pgDecodeColumnNotNull
                        _tenv_aaASV (PGTypeProxy :: PGTypeName "text") _cname_aaAT9, 
                      pgDecodeColumn
                        _tenv_aaASV (PGTypeProxy :: PGTypeName "text") _cbody_aaATa, 
                      pgDecodeColumn
                        _tenv_aaASV
                        (PGTypeProxy :: PGTypeName "character varying")
                        _calias_aaATb, 
                      pgDecodeColumn
                        _tenv_aaASV
                        (PGTypeProxy :: PGTypeName "character varying")
                        _cdoi_aaATc, 
                      pgDecodeColumn
                        _tenv_aaASV
                        (PGTypeProxy :: PGTypeName "timestamp with time zone")
                        _cvolume_creation_aaATd, 
                      pgDecodeColumnNotNull
                        _tenv_aaASV (PGTypeProxy :: PGTypeName "text[]") _cowners_aaATe, 
                      pgDecodeColumn
                        _tenv_aaASV
                        (PGTypeProxy :: PGTypeName "permission")
                        _cpermission_aaATf, 
                      pgDecodeColumn
                        _tenv_aaASV
                        (PGTypeProxy :: PGTypeName "boolean")
                        _cshare_full_aaATg)))
         (identitySuperuser ident)
         (view ident :: Id Party)
         (identitySuperuser ident)
         (view ident :: Id Party)
         ai)
src/Databrary/Model/Asset.hs:330:19-154: Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      pgSQL
      "$SELECT audit_time, name FROM audit.asset WHERE id = ${assetId $ assetRow a} AND audit_action = 'add' ORDER BY audit_time DESC LIMIT 1"
  ======>
    (\ _p_aaAUI
       -> Database.PostgreSQL.Typed.Query.QueryParser
            (\ _tenv_aaAUH
               -> Database.PostgreSQL.Typed.Query.PreparedQuery
                    (Data.String.fromString
                       "SELECT audit_time, name FROM audit.asset WHERE id = $1 AND audit_action = 'add' ORDER BY audit_time DESC LIMIT 1")
                    []
                    [pgEncodeParameter
                       _tenv_aaAUH (PGTypeProxy :: PGTypeName "integer") _p_aaAUI]
                    [pgBinaryColumn
                       _tenv_aaAUH (PGTypeProxy :: PGTypeName "timestamp with time zone"),
                     pgBinaryColumn _tenv_aaAUH (PGTypeProxy :: PGTypeName "text")])
            (\ _tenv_aaAUH [_caudit_time_aaAUJ, _cname_aaAUK]
               -> (pgDecodeColumnNotNull
                     _tenv_aaAUH
                     (PGTypeProxy :: PGTypeName "timestamp with time zone")
                     _caudit_time_aaAUJ, 
                   pgDecodeColumn
                     _tenv_aaAUH (PGTypeProxy :: PGTypeName "text") _cname_aaAUK)))
      (assetId $ assetRow a)
