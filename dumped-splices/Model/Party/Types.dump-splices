Databrary/Model/Party/Types.hs:48:1-32: Splicing declarations
    makeHasRec ''PartyRow ['partyId]
  ======>
    instance Has (Id Party) PartyRow where
      view = partyId
Databrary/Model/Party/Types.hs:49:1-30: Splicing declarations
    makeHasRec ''Party ['partyRow]
  ======>
    instance Has PartyRow Party where
      view = partyRow
    instance Has (Id Party) Party where
      view = (view . partyRow)
Databrary/Model/Party/Types.hs:50:1-36: Splicing declarations
    makeHasRec ''Account ['accountParty]
  ======>
    instance Has Party Account where
      view = accountParty
    instance Has PartyRow Account where
      view = (view . accountParty)
    instance Has (Id Party) Account where
      view = (view . accountParty)
Databrary/Model/Party/Types.hs:68:1-49: Splicing declarations
    makeHasRec ''SiteAuth ['siteAccount, 'siteAccess]
  ======>
    instance Has Account SiteAuth where
      view = siteAccount
    instance Has Party SiteAuth where
      view = (view . siteAccount)
    instance Has PartyRow SiteAuth where
      view = (view . siteAccount)
    instance Has (Id Party) SiteAuth where
      view = (view . siteAccount)
    instance Has Access SiteAuth where
      view = siteAccess
Databrary/Model/Party/Types.hs:70:1-47: Splicing declarations
    deriveLiftMany [''PartyRow, ''Party, ''Account]
  ======>
    instance Language.Haskell.TH.Syntax.Lift PartyRow where
      Language.Haskell.TH.Syntax.lift
        = \ e_a4HIq
            -> case e_a4HIq of {
                 PartyRow x0_a4HIr x1_a4HIs x2_a4HIt x3_a4HIu x4_a4HIv x5_a4HIw
                   -> Language.Haskell.TH.Lib.appE
                        (Language.Haskell.TH.Lib.appE
                           (Language.Haskell.TH.Lib.appE
                              (Language.Haskell.TH.Lib.appE
                                 (Language.Haskell.TH.Lib.appE
                                    (Language.Haskell.TH.Lib.appE
                                       (Language.Haskell.TH.Lib.conE
                                          (Language.Haskell.TH.Syntax.Name
                                             (Language.Haskell.TH.Syntax.mkOccName "PartyRow")
                                             (Language.Haskell.TH.Syntax.NameG
                                                Language.Haskell.TH.Syntax.DataName
                                                (Language.Haskell.TH.Syntax.mkPkgName "main")
                                                (Language.Haskell.TH.Syntax.mkModName
                                                   "Databrary.Model.Party.Types"))))
                                       (Language.Haskell.TH.Syntax.lift x0_a4HIr))
                                    (Language.Haskell.TH.Syntax.lift x1_a4HIs))
                                 (Language.Haskell.TH.Syntax.lift x2_a4HIt))
                              (Language.Haskell.TH.Syntax.lift x3_a4HIu))
                           (Language.Haskell.TH.Syntax.lift x4_a4HIv))
                        (Language.Haskell.TH.Syntax.lift x5_a4HIw) }
    instance Language.Haskell.TH.Syntax.Lift Party where
      Language.Haskell.TH.Syntax.lift
        = \ e_a4HIA
            -> case e_a4HIA of {
                 Party x0_a4HIB x1_a4HIC x2_a4HID x3_a4HIE
                   -> Language.Haskell.TH.Lib.appE
                        (Language.Haskell.TH.Lib.appE
                           (Language.Haskell.TH.Lib.appE
                              (Language.Haskell.TH.Lib.appE
                                 (Language.Haskell.TH.Lib.conE
                                    (Language.Haskell.TH.Syntax.Name
                                       (Language.Haskell.TH.Syntax.mkOccName "Party")
                                       (Language.Haskell.TH.Syntax.NameG
                                          Language.Haskell.TH.Syntax.DataName
                                          (Language.Haskell.TH.Syntax.mkPkgName "main")
                                          (Language.Haskell.TH.Syntax.mkModName
                                             "Databrary.Model.Party.Types"))))
                                 (Language.Haskell.TH.Syntax.lift x0_a4HIB))
                              (Language.Haskell.TH.Syntax.lift x1_a4HIC))
                           (Language.Haskell.TH.Syntax.lift x2_a4HID))
                        (Language.Haskell.TH.Syntax.lift x3_a4HIE) }
    instance Language.Haskell.TH.Syntax.Lift Account where
      Language.Haskell.TH.Syntax.lift
        = \ e_a4HIF
            -> case e_a4HIF of {
                 Account x0_a4HIG x1_a4HIH
                   -> Language.Haskell.TH.Lib.appE
                        (Language.Haskell.TH.Lib.appE
                           (Language.Haskell.TH.Lib.conE
                              (Language.Haskell.TH.Syntax.Name
                                 (Language.Haskell.TH.Syntax.mkOccName "Account")
                                 (Language.Haskell.TH.Syntax.NameG
                                    Language.Haskell.TH.Syntax.DataName
                                    (Language.Haskell.TH.Syntax.mkPkgName "main")
                                    (Language.Haskell.TH.Syntax.mkModName
                                       "Databrary.Model.Party.Types"))))
                           (Language.Haskell.TH.Syntax.lift x0_a4HIG))
                        (Language.Haskell.TH.Syntax.lift x1_a4HIH) }
