src/Databrary/Model/Party.hs:64:1-6: Splicing declarations
    useTDB ======>
src/Databrary/Model/Party.hs:561:16-72: Splicing expression
    selectQuery (selectParty 'ident_a9zHi) "$WHERE party.id = ${i}"
  ======>
    fmap
      (\ (vid_a9JgZ, vname_a9Jh0, vprename_a9Jh1, vorcid_a9Jh2,
          vaffiliation_a9Jh3, vurl_a9Jh4, vemail_a9Jh5)
         -> permissionParty
              (makeParty
                 (PartyRow
                    vid_a9JgZ
                    vname_a9Jh0
                    vprename_a9Jh1
                    vorcid_a9Jh2
                    vaffiliation_a9Jh3
                    vurl_a9Jh4)
                 (do { cm_a9Jh6 <- vemail_a9Jh5;
                       Just (Account cm_a9Jh6) }))
              Nothing
              ident_a9zHi)
      ((\ _p_a9Jh8
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_a9Jh7
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT party.id,party.name,party.prename,party.orcid,party.affiliation,party.url,account.email FROM party LEFT JOIN account USING (id) WHERE party.id = $1")
                       []
                       [pgEncodeParameter
                          _tenv_a9Jh7 (PGTypeProxy :: PGTypeName "integer") _p_a9Jh8]
                       [pgBinaryColumn _tenv_a9Jh7 (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_a9Jh7 (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_a9Jh7 (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_a9Jh7 (PGTypeProxy :: PGTypeName "bpchar"),
                        pgBinaryColumn _tenv_a9Jh7 (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_a9Jh7 (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn
                          _tenv_a9Jh7 (PGTypeProxy :: PGTypeName "character varying")])
               (\ _tenv_a9Jh7
                  [_cid_a9Jh9,
                   _cname_a9Jha,
                   _cprename_a9Jhb,
                   _corcid_a9Jhc,
                   _caffiliation_a9Jhd,
                   _curl_a9Jhe,
                   _cemail_a9Jhf]
                  -> (pgDecodeColumnNotNull
                        _tenv_a9Jh7 (PGTypeProxy :: PGTypeName "integer") _cid_a9Jh9, 
                      pgDecodeColumnNotNull
                        _tenv_a9Jh7 (PGTypeProxy :: PGTypeName "text") _cname_a9Jha, 
                      pgDecodeColumn
                        _tenv_a9Jh7 (PGTypeProxy :: PGTypeName "text") _cprename_a9Jhb, 
                      pgDecodeColumn
                        _tenv_a9Jh7 (PGTypeProxy :: PGTypeName "bpchar") _corcid_a9Jhc, 
                      pgDecodeColumn
                        _tenv_a9Jh7
                        (PGTypeProxy :: PGTypeName "text")
                        _caffiliation_a9Jhd, 
                      pgDecodeColumn
                        _tenv_a9Jh7 (PGTypeProxy :: PGTypeName "text") _curl_a9Jhe, 
                      pgDecodeColumnNotNull
                        _tenv_a9Jh7
                        (PGTypeProxy :: PGTypeName "character varying")
                        _cemail_a9Jhf)))
         i)
src/Databrary/Model/Party.hs:(566,7)-(570,92): Splicing expression
    selectQuery
      (selectPartyRow)
      "$WHERE exists  (select *   from party p2   where p2.prename = party.prename and p2.name = party.name and party.id < p2.id) "
  ======>
    fmap
      (\ (vid_a9Jhk, vname_a9Jhl, vprename_a9Jhm, vorcid_a9Jhn,
          vaffiliation_a9Jho, vurl_a9Jhp)
         -> PartyRow
              vid_a9Jhk
              vname_a9Jhl
              vprename_a9Jhm
              vorcid_a9Jhn
              vaffiliation_a9Jho
              vurl_a9Jhp)
      (\ -> Database.PostgreSQL.Typed.Query.QueryParser
              (\ _tenv_a9Jhq
                 -> Database.PostgreSQL.Typed.Query.PreparedQuery
                      (Data.String.fromString
                         "SELECT party.id,party.name,party.prename,party.orcid,party.affiliation,party.url FROM party WHERE exists  (select *   from party p2   where p2.prename = party.prename and p2.name = party.name and party.id < p2.id) ")
                      []
                      []
                      [pgBinaryColumn _tenv_a9Jhq (PGTypeProxy :: PGTypeName "integer"),
                       pgBinaryColumn _tenv_a9Jhq (PGTypeProxy :: PGTypeName "text"),
                       pgBinaryColumn _tenv_a9Jhq (PGTypeProxy :: PGTypeName "text"),
                       pgBinaryColumn _tenv_a9Jhq (PGTypeProxy :: PGTypeName "bpchar"),
                       pgBinaryColumn _tenv_a9Jhq (PGTypeProxy :: PGTypeName "text"),
                       pgBinaryColumn _tenv_a9Jhq (PGTypeProxy :: PGTypeName "text")])
              (\ _tenv_a9Jhq
                 [_cid_a9Jhr,
                  _cname_a9Jhs,
                  _cprename_a9Jht,
                  _corcid_a9Jhu,
                  _caffiliation_a9Jhv,
                  _curl_a9Jhw]
                 -> (pgDecodeColumnNotNull
                       _tenv_a9Jhq (PGTypeProxy :: PGTypeName "integer") _cid_a9Jhr, 
                     pgDecodeColumnNotNull
                       _tenv_a9Jhq (PGTypeProxy :: PGTypeName "text") _cname_a9Jhs, 
                     pgDecodeColumn
                       _tenv_a9Jhq (PGTypeProxy :: PGTypeName "text") _cprename_a9Jht, 
                     pgDecodeColumn
                       _tenv_a9Jhq (PGTypeProxy :: PGTypeName "bpchar") _corcid_a9Jhu, 
                     pgDecodeColumn
                       _tenv_a9Jhq
                       (PGTypeProxy :: PGTypeName "text")
                       _caffiliation_a9Jhv, 
                     pgDecodeColumn
                       _tenv_a9Jhq (PGTypeProxy :: PGTypeName "text") _curl_a9Jhw)))
src/Databrary/Model/Party.hs:667:16-76: Splicing expression
    selectQuery (selectAuthParty 'ident_a9JhW) "$WHERE party.id = ${i}"
  ======>
    fmap
      (\ (vid_a9Ji5, vname_a9Ji6, vprename_a9Ji7, vorcid_a9Ji8,
          vaffiliation_a9Ji9, vurl_a9Jia, vemail_a9Jib, vsite_a9Jic,
          vmember_a9Jid)
         -> permissionParty
              (makeParty
                 (PartyRow
                    vid_a9Ji5
                    vname_a9Ji6
                    vprename_a9Ji7
                    vorcid_a9Ji8
                    vaffiliation_a9Ji9
                    vurl_a9Jia)
                 (do { cm_a9Jie <- vemail_a9Jib;
                       Just (Account cm_a9Jie) }))
              (do { cm_a9Jif <- vsite_a9Jic;
                    cm_a9Jig <- vmember_a9Jid;
                    Just (Access cm_a9Jif cm_a9Jig) })
              ident_a9JhW)
      ((\ _p_a9Jii _p_a9Jij
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_a9Jih
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT party.id,party.name,party.prename,party.orcid,party.affiliation,party.url,account.email,authorize_valid.site,authorize_valid.member FROM party LEFT JOIN account USING (id) LEFT JOIN authorize_valid ON party.id = authorize_valid.parent AND authorize_valid.child = $1 WHERE party.id = $2")
                       []
                       [pgEncodeParameter
                          _tenv_a9Jih (PGTypeProxy :: PGTypeName "integer") _p_a9Jii,
                        pgEncodeParameter
                          _tenv_a9Jih (PGTypeProxy :: PGTypeName "integer") _p_a9Jij]
                       [pgBinaryColumn _tenv_a9Jih (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_a9Jih (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_a9Jih (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_a9Jih (PGTypeProxy :: PGTypeName "bpchar"),
                        pgBinaryColumn _tenv_a9Jih (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_a9Jih (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn
                          _tenv_a9Jih (PGTypeProxy :: PGTypeName "character varying"),
                        pgBinaryColumn
                          _tenv_a9Jih (PGTypeProxy :: PGTypeName "permission"),
                        pgBinaryColumn
                          _tenv_a9Jih (PGTypeProxy :: PGTypeName "permission")])
               (\ _tenv_a9Jih
                  [_cid_a9Jik,
                   _cname_a9Jil,
                   _cprename_a9Jim,
                   _corcid_a9Jin,
                   _caffiliation_a9Jio,
                   _curl_a9Jip,
                   _cemail_a9Jiq,
                   _csite_a9Jir,
                   _cmember_a9Jis]
                  -> (pgDecodeColumnNotNull
                        _tenv_a9Jih (PGTypeProxy :: PGTypeName "integer") _cid_a9Jik, 
                      pgDecodeColumnNotNull
                        _tenv_a9Jih (PGTypeProxy :: PGTypeName "text") _cname_a9Jil, 
                      pgDecodeColumn
                        _tenv_a9Jih (PGTypeProxy :: PGTypeName "text") _cprename_a9Jim, 
                      pgDecodeColumn
                        _tenv_a9Jih (PGTypeProxy :: PGTypeName "bpchar") _corcid_a9Jin, 
                      pgDecodeColumn
                        _tenv_a9Jih
                        (PGTypeProxy :: PGTypeName "text")
                        _caffiliation_a9Jio, 
                      pgDecodeColumn
                        _tenv_a9Jih (PGTypeProxy :: PGTypeName "text") _curl_a9Jip, 
                      pgDecodeColumnNotNull
                        _tenv_a9Jih
                        (PGTypeProxy :: PGTypeName "character varying")
                        _cemail_a9Jiq, 
                      pgDecodeColumn
                        _tenv_a9Jih (PGTypeProxy :: PGTypeName "permission") _csite_a9Jir, 
                      pgDecodeColumn
                        _tenv_a9Jih
                        (PGTypeProxy :: PGTypeName "permission")
                        _cmember_a9Jis)))
         (view ident :: Id Party) i)
src/Databrary/Model/Party.hs:1044:41-209: Splicing expression
    selectQuery selectAssetRow
    $ "$JOIN avatar ON asset.id = avatar.asset WHERE avatar.party = ${p} AND asset.volume = "
      ++ pgLiteralString (volumeId $ volumeRow coreVolume)
  ======>
    fmap
      (\ (vid_a9JkO, vformat_a9JkP, vrelease_a9JkQ, vduration_a9JkR,
          vname_a9JkS, vc_a9JkT, vsize_a9JkU)
         -> makeAssetRow
              vid_a9JkO
              vformat_a9JkP
              vrelease_a9JkQ
              vduration_a9JkR
              vname_a9JkS
              vc_a9JkT
              vsize_a9JkU)
      ((\ _p_a9JkW
          -> Database.PostgreSQL.Typed.Query.QueryParser
               (\ _tenv_a9JkV
                  -> Database.PostgreSQL.Typed.Query.PreparedQuery
                       (Data.String.fromString
                          "SELECT asset.id,asset.format,asset.release,asset.duration,asset.name,asset.sha1,asset.size FROM asset JOIN avatar ON asset.id = avatar.asset WHERE avatar.party = $1 AND asset.volume = 0")
                       []
                       [pgEncodeParameter
                          _tenv_a9JkV (PGTypeProxy :: PGTypeName "integer") _p_a9JkW]
                       [pgBinaryColumn _tenv_a9JkV (PGTypeProxy :: PGTypeName "integer"),
                        pgBinaryColumn _tenv_a9JkV (PGTypeProxy :: PGTypeName "smallint"),
                        pgBinaryColumn _tenv_a9JkV (PGTypeProxy :: PGTypeName "release"),
                        pgBinaryColumn _tenv_a9JkV (PGTypeProxy :: PGTypeName "interval"),
                        pgBinaryColumn _tenv_a9JkV (PGTypeProxy :: PGTypeName "text"),
                        pgBinaryColumn _tenv_a9JkV (PGTypeProxy :: PGTypeName "bytea"),
                        pgBinaryColumn _tenv_a9JkV (PGTypeProxy :: PGTypeName "bigint")])
               (\ _tenv_a9JkV
                  [_cid_a9JkX,
                   _cformat_a9JkY,
                   _crelease_a9JkZ,
                   _cduration_a9Jl0,
                   _cname_a9Jl1,
                   _csha1_a9Jl2,
                   _csize_a9Jl3]
                  -> (pgDecodeColumnNotNull
                        _tenv_a9JkV (PGTypeProxy :: PGTypeName "integer") _cid_a9JkX, 
                      pgDecodeColumnNotNull
                        _tenv_a9JkV (PGTypeProxy :: PGTypeName "smallint") _cformat_a9JkY, 
                      pgDecodeColumn
                        _tenv_a9JkV (PGTypeProxy :: PGTypeName "release") _crelease_a9JkZ, 
                      pgDecodeColumn
                        _tenv_a9JkV
                        (PGTypeProxy :: PGTypeName "interval")
                        _cduration_a9Jl0, 
                      pgDecodeColumn
                        _tenv_a9JkV (PGTypeProxy :: PGTypeName "text") _cname_a9Jl1, 
                      pgDecodeColumn
                        _tenv_a9JkV (PGTypeProxy :: PGTypeName "bytea") _csha1_a9Jl2, 
                      pgDecodeColumn
                        _tenv_a9JkV (PGTypeProxy :: PGTypeName "bigint") _csize_a9Jl3)))
         p)
